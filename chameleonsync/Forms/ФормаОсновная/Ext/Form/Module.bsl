////////////////////////////////////////////////////////////////////////////////
// <(c) Автор="Skipper">" Дата="14.01.2019"/>
// <Описание>
// Модуль для синхронизации данных с сервера Хамелеон в базу 1С
// </Описание>

&НаСервере
Функция PostgreSQLQuery(PostgreSQLObject, Отказ, Query) 
	ОбработкаПрерыванияПользователя();
	
    PostgreSQLcRS = Новый COMОбъект("ADODB.Recordset");
	Если Отказ Тогда
		Возврат PostgreSQLcRS;
	КонецЕсли;
		
    Попытка
        PostgreSQLcRS = PostgreSQLObject.Execute(Query);
    Исключение
        Сообщить("Невозможно выполнить SQL запрос " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Сообщить(Query);
        Отказ = Истина;
    КонецПопытки;
    
    Возврат PostgreSQLcRS;
КонецФункции

&НаКлиенте
Процедура ВыполнитьНаКлиенте(Команда)
	ВыполнитьНаСервере();
	
	// Фокус на странице документов
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.Документы;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере()
	Отказ = Ложь;
	PostgreSQLObject = Новый COMОбъект("ADODB.Connection");
	                                                
	ConnectionString = "Driver={PostgreSQL UNICODE};Server=" + Объект.ИмяСервера 
		+ ";Port=" + Объект.ПортСервера 
		+ ";Database=" + Объект.ИмяБазы 
		+ ";Uid=" + Объект.ИмяПользователя 
		+ ";Pwd=" + Объект.ПарольПользователя +";";
	
	Попытка                    
		PostgreSQLObject.Open(ConnectionString);
		PostgreSQLObject.Execute("SET timezone TO 'Europe/Kiev'");
		PostgreSQLObject.Execute("BEGIN;");
	Исключение   
		Сообщить(ConnectionString);
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		PostgreSQLObject.Execute("ROLLBACK;");
		Возврат;
	КонецПопытки;	
	
	// Чистим таблицу документов
	Объект.ТаблицаДокументов.Очистить();
	
	// Загружаем с сервера хамелеона
	Если Объект.ТипЗагрузки = 1 Тогда
		ЗагрузитьОтчетОРозничныхПродажах(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 2 Тогда	
		ЗагрузитьОтчетПоступленияТоваровУслуг(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 3 Тогда
		ЗагрузитьВозвратТоваровПоставщику(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 4 Тогда
		ЗагрузитьПеремещениеТоваров(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 5 Тогда
		ЗагрузитьИнвентаризациюТоваровНаСкладе(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 6 Тогда
		ЗагрузитьКассовыеДокументы(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 7 Тогда
		ЗагрузитьНоменклатуру(PostgreSQLObject, Отказ);
	ИначеЕсли Объект.ТипЗагрузки = 8 Тогда
		ЗагрузитьПереоценку(PostgreSQLObject, Отказ);
	КонецЕсли;	
	
	PostgreSQLObject.Execute("COMMIT;");
	PostgreSQLObject.Close();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуру(PostgreSQLObject, Отказ)
	Сообщить("Загрузка номенклатуры");
	
	//ЗагрузитьТаблицуЕдиницИзмерений(PostgreSQLObject, Отказ);
	//Загрузить_ТаблицуГруппНоменклатуры(PostgreSQLObject, Отказ);
	ЗагрузитьТаблицуНоменклатуры(PostgreSQLObject, Отказ);
КонецПроцедуры

&НаСервере
//Улучшить
Функция ЗагрузитьТаблицуЕдиницИзмерений(PostgreSQLObject, Отказ)
	
	СтрокаЗапроса = "
	| SELECT 
	| 	DISTINCT id_unit, 
	|	name_unit, 
	|	type_unit, 
	|	rate 
	| FROM front.unit 
	| WHERE active = true AND is_default = true 
	| ORDER BY id_unit";
	
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезультатЗапроса.EOF() = 0  Цикл
		
		Код = РезультатЗапроса.Fields("id_unit").Value; 		
		Наименование = РезультатЗапроса.Fields("name_unit").Value;
		Тип = РезультатЗапроса.Fields("type_unit").Value;
		Коэфициент = РезультатЗапроса.Fields("rate").Value;
		
		Сообщить("Единица " + Код + " : " + Наименование);
		
		Единица = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование); // Потому как код ВНЕЗАПНО не уникален в базе
		Если Единица.Пустая() Тогда 			
	    	НоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();			
			//НоваяЕдиница.Код = Код;  //Потому как код ВНЕЗАПНО не уникален в базе
			//НоваяЕдиница.Коэффициент = Коэфициент; 
		    НоваяЕдиница.Наименование = Наименование; 
			НоваяЕдиница.Записать();
			
		Иначе
			ИзменяемаяЕдиница = Единица.ПолучитьОбъект();
			//НоваяЕдиница.Коэффициент = Коэфициент;
		    ИзменяемаяЕдиница.Наименование = Наименование;
			ИзменяемаяЕдиница.Записать();
			
		КонецЕсли;

		
		РезультатЗапроса.MoveNext();    
	КонецЦикла;
	
КонецФункции	

&НаСервере
Функция ЗагрузитьТаблицуГруппНоменклатуры(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГруппКолонки = ТаблицаГрупп.Колонки;
	ТаблицаГруппКолонки.Добавить("id_group");
	ТаблицаГруппКолонки.Добавить("name_group");
	ТаблицаГруппКолонки.Добавить("id_owner_group");
	ТаблицаГруппКолонки.Добавить("active");
	
	СтрокаЗапроса = "SELECT id_group, name_group, id_owner_group, active FROM front.group_goods ORDER BY id_group";
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF() = 0  Цикл
		СтрокаТаблицаГрупп = ТаблицаГрупп.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаГрупп.Колонки Цикл         		
			СтрокаТаблицаГрупп[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;    
			//Сообщить(Колонка.Имя);
		КонецЦикла; 
		
		РезЗапроса.MoveNext();    
	КонецЦикла;

	//Группа = Справочники.Номенклатура.Выбрать();
	//Пока Группа.Следующий() = 1 Цикл
	//	Если Группа.ЭтоГруппа = Истина Тогда
	//		Сообщить("Код группы " + Группа.Код);	
	//	Иначе
	//		Сообщить("Код не группы " + Группа.Код);	
	//	КонецЕсли;
	//КонецЦикла;  
	
	Для Каждого СтрокаТаблицаГрупп Из ТаблицаГрупп Цикл
		Сообщить("Группа: " + СтрокаТаблицаГрупп.name_group);
		
		Код = СтрокаТаблицаГрупп.id_group;
		Родитель = Справочники.Номенклатура.НайтиПоКоду(СтрокаТаблицаГрупп.id_owner_group);
		Наименование = СтрокаТаблицаГрупп.name_group;
		
		Группа = Справочники.Номенклатура.НайтиПоКоду(Код);
		Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
			//Сообщить("Код группы " + Код + " не найден - создаем новую");
			
	    	НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();			
			НоваяГруппа.Код = Код;
			НоваяГруппа.Родитель = Родитель; 
		    НоваяГруппа.Наименование = Наименование; 
			НоваяГруппа.Записать();
			
		Иначе
			ИзменяемаяГруппа = Группа.ПолучитьОбъект();
			ИзменяемаяГруппа.Родитель = Родитель;
		    ИзменяемаяГруппа.Наименование = Наименование;
			ИзменяемаяГруппа.Записать();
			
		КонецЕсли;
	КонецЦикла;

	
КонецФункции	

&НаСервере
Функция ЗагрузитьТаблицуНоменклатуры(PostgreSQLObject, Отказ)
		
	СтрокаЗапроса = "
	| SELECT 
	| 	id_goods, 
	| 	id_group, 
	| 	(SELECT rate_tax FROM front.tax WHERE id_tax = goods.id_tax), 
	| 	(SELECT name_unit FROM front.unit WHERE is_default = true AND id_goods = goods.id_goods),
	| 	(SELECT bar_code FROM front.bar_codes WHERE id_goods = goods.id_goods LIMIT 1), 
	| 	name_goods, 
	| 	type_goods
	| FROM front.goods 
	| ORDER BY id_goods";
	
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезультатЗапроса.EOF() = 0  Цикл
				
		Код = РезультатЗапроса.Fields("id_goods").Value;
		//Родитель = Справочники.Номенклатура.НайтиПоКоду(СтрокаТаблицаНоменклатуры.id_group);
		type_goods = РезультатЗапроса.Fields("type_goods").Value;
		ВидНоменклатуры = ПолучитьВидНоменклатуры(type_goods);
		
		name_unit = РезультатЗапроса.Fields("name_unit").Value;
		БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(name_unit);
		Если БазоваяЕдиницаИзмерения.Пустая() Тогда
			// Сделать:  ЗАгрузить единицу измерения
			ОбщегоНазначения.СообщитьОбОшибке("Загрузить_ТаблицуНоменклатуры(): Нет Базовая Единица Измерения " + name_unit);	
		КонецЕсли;
			
		Артикул = РезультатЗапроса.Fields("bar_code").Value; // Исправить Использовать штрихкоды
		Наименование = РезультатЗапроса.Fields("name_goods").Value;
		
		rate_tax = РезультатЗапроса.Fields("rate_tax").Value;
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС; 
		Если rate_tax = 0.00 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли rate_tax = 7.00 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС7;
		ИначеЕсли rate_tax = 20.00 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Загрузить_ТаблицуНоменклатуры(): Нет соответствия налоговой ставки");	
		КонецЕсли;
		
		Сообщить("Товар " + Код + " : " + Наименование);
		
		Элемент = Справочники.Номенклатура.НайтиПоКоду(Код);
		Если Элемент.Пустая() Тогда
			
        	НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.Код = Код;			
			НовыйЭлемент.Артикул = Артикул;
			//НовыйЭлемент.Родитель = Родитель;
			НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры;
			НовыйЭлемент.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;	    
			НовыйЭлемент.Наименование = Наименование;
			НовыйЭлемент.СтавкаНДС = СтавкаНДС;
			НовыйЭлемент.Записать();
						
			ДополнительнаяЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(НовыйЭлемент, name_unit);
			НовыйЭлемент.ЕдиницаХраненияОстатков = ДополнительнаяЕдиницаИзмерения;  
			НовыйЭлемент.ЕдиницаДляОтчетов = ДополнительнаяЕдиницаИзмерения;	
			НовыйЭлемент.Записать();

			//Попытка
			//
        	//Исключение
        	//	Сообщить(ОписаниеОшибки());
    		//КонецПопытки; 
			
		Иначе
			ИзменяемыйЭлемент = Элемент.ПолучитьОбъект();
			ИзменяемыйЭлемент.Артикул = Артикул;
			//ИзменяемыйЭлемент.Родитель = Родитель;
			ИзменяемыйЭлемент.ВидНоменклатуры = ВидНоменклатуры;
			ИзменяемыйЭлемент.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
			ИзменяемыйЭлемент.Наименование = Наименование;
			ИзменяемыйЭлемент.СтавкаНДС = СтавкаНДС; 			
			ИзменяемыйЭлемент.Записать();
					
			ДополнительнаяЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ИзменяемыйЭлемент, name_unit);
			ИзменяемыйЭлемент.ЕдиницаХраненияОстатков = ДополнительнаяЕдиницаИзмерения;  
			ИзменяемыйЭлемент.ЕдиницаДляОтчетов = ДополнительнаяЕдиницаИзмерения;
			ИзменяемыйЭлемент.Записать();
			
		КонецЕсли;	
		
		РезультатЗапроса.MoveNext();    
	КонецЦикла;

КонецФункции

&НаСервере
//Улучшить
Процедура СохранитьНоменклатуру()
	//Добавить сохранение из таблицы документов	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОтчетОРозничныхПродажах(PostgreSQLObject, Отказ)
	Отказ = Ложь;

	ТаблицаПродаж = ЗагрузитьТаблицуЧеков(PostgreSQLObject, Отказ);
	ТаблицаПереоценок = ЗагрузитьТаблицуПереоценок(PostgreSQLObject, Отказ);
	ТаблицаРозничныхПродаж = ВернутьТаблицуРозничныхПродаж();
	
	КолонкиТаблицыПереоценок = ТаблицаПереоценок.Колонки;
	КолонкиТаблицыПереоценок.Добавить("ВремяСканирования");
	Для Каждого СтрокаОтчета Из ТаблицаПереоценок Цикл
		//СтрокаОтчета.ВремяСканирования = ПреобразоватьВДату(СтрокаОтчета.ВремяСканированияТекст);
		СтрокаОтчета.ВремяСканирования = ПреобразоватьВДату(СтрокаОтчета.date_doc);

	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Для каждого рабочего места из СтруктураПродаж сформируем как минимум несколько документов
	// Разделяем по:
	// 1 - типу оплаты (0 и все остальные)
	// 2 - в зависимости от настроек
	
	// У документов отчет о розничных продажах есть реквизит ХамелеонИндексПоиска
	// Который состоит из значений разделенных ";"
	// 1 - рабочее место
	// 2 - тип оплаты, 0 и все остальные
	// 3 - номер принтера, если не разделяем то значение = *
		
	// Перебираем во всех продажах
	Для Каждого Продажа Из ТаблицаПродаж Цикл
		РабочееМесто = Продажа.НомерРабочегоМеста;
		Чеки = Продажа.ДанныеЧеков;
		ПоДням = ТекущаяДата();
		
		// Перебираем во всех чеках
		Для Каждого Чек Из Чеки Цикл
			
	
			ВремяЧека = ПреобразоватьВДату(Чек.time_check);
			ДоСканирования = Истина;

			// Документы по датам
			Если НачалоДня(ПоДням) <> НачалоДня(ВремяЧека) Тогда
				ПоДням = ВремяЧека;             
			КонецЕсли;
						
			// Заполним продажи за наличку и безнал
			Если Число(Чек.type_payment)=0 или Число(Чек.type_payment)=1 или Число(Чек.type_payment)=8 или Число(Чек.type_payment)=9 Тогда
				ДобавитьЧек = Ложь;
			Иначе
				ДобавитьЧек = Истина;
			КонецЕсли;
			
			// Заполним продажи дисконтна
			Если НЕ Чек.id_discount_card = 0 Тогда
				ДобавитьДисконт = Истина;
			КонецЕсли;
			
			
			// Ищем во всех строках чеков, подходящие формируем в документ 
			Для Каждого СтрокаЧека Из Чек.СтрокиЧека Цикл
				Сообщить("Формирование документов розничных продаж");
				
				// Сформируем индекс поиска
				Если Объект.РазделятьПоВидамОплаты Тогда
					ИндексПоиска = СокрЛП(РабочееМесто) + ";" + ?(Чек.type_payment="0","0","1")+";";
				Иначе
					ИндексПоиска = СокрЛП(РабочееМесто) + ";" +"1"+";";
				КонецЕсли;
				
				Если Объект.РазделятьПоДням Тогда
					ИндексПоиска = ИндексПоиска + Формат(ПоДням, "ДФ=дд.ММ.yyyy") + ";";
				КонецЕсли;

				// ИСПРАВИТЬ ПолучитьЭлементСправочника()
				//
				//Товар = ПолучитьЭлементСправочника(СтрокаЧека.id_goods, "Номенклатура");
				Товар = Справочники.Номенклатура.НайтиПоКоду(СтрокаЧека.id_goods);
				Если Товар.Пустая() Тогда
					Сообщить("Внимание!!! Не найден товар " + СтрокаЧека.id_goods, СтатусСообщения.Важное);
				КонецЕсли;
				
				//ЕдИзм = ПолучитьЭлементСправочника(СтрокаЧека.id_unit, "ЕдиницыИзмерения", СтрокаЧека.id_goods, "Номенклатура");
				//ЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоКоду(СтрокаЧека.id_unit);
				//Исправить отбор единственной единицы по владельцу
				ЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(,,Товар);
				Если ЕдИзм.Пустая() Тогда
					Сообщить("Внимание!!! Не найдена единица измерения " + СтрокаЧека.id_unit, СтатусСообщения.Важное);
				КонецЕсли;
				
				Серия = ПолучитьСериюТовара(Товар, СтрокаЧека.search_key);
				Если Серия.Пустая() Тогда
					Сообщить("Внимание!!! Не найдена серия для товара " + СтрокаЧека.id_goods, СтатусСообщения.Внимание);
				КонецЕсли;

				Характеристика = ПолучитьХарактеристикуТовара(Товар, СтрокаЧека.search_key);
				Если Характеристика.Пустая() Тогда
					Сообщить("Внимание!!! Не найдена характеристика для товара " + СтрокаЧека.id_goods, СтатусСообщения.Внимание);
				КонецЕсли;
				
				//Если РазделятьПоПереоценке Тогда
				//	СтрокаТаблицыПереоценок = ТаблицаПереоценок.Найти(РабочееМесто,"НомерРабочегоМеста");
				//	Если НЕ СтрокаТаблицыПереоценок = Неопределено Тогда
				//		Если ВремяЧека >= СтрокаТаблицыПереоценок.ВремяСканирования Тогда
				//			ДоСканирования = Ложь;
				//		КонецЕсли;
				//	КонецЕсли;
				//	ИндексПоиска = ИндексПоиска + ДоСканирования;
				//КонецЕсли;
				
				Если Объект.РазделятьПоПринтеру Тогда
					// Исправить по номеру принтер
					ИндексПоиска = ИндексПоиска + СокрЛП(Товар.chm_НомерПринтера) + СокрЛП(СтрокаЧека.printer);
					ПризнакОтраженияВУчете = СокрЛП(СтрокаЧека.printer);
				Иначе
					ИндексПоиска = ИндексПоиска + "*";
				КонецЕсли;                              
				
				Сообщить(ИндексПоиска); 
				
				       
				// Ищем существующий документ по индексу или добавляем новый если ничего не найдено
				// Собственно от индекса и зависит создание новых документов
				СтрокаТаблицыДокументов = ТаблицаРозничныхПродаж.Найти(ИндексПоиска, "ИндексПоиска");
				Если СтрокаТаблицыДокументов = Неопределено Тогда
					Сообщить("Добавляем новый документ от " + ПоДням);
					
					//СтрокаТаблицыДокументов = Объект.ТаблицаДокументов.Добавить();
					СтрокаТаблицыДокументов = ТаблицаРозничныхПродаж.Добавить();
					СтрокаТаблицыДокументов.ИндексПоиска = ИндексПоиска;
					СтрокаТаблицыДокументов.ДатаДокумента = ПолучитьДатуИзСтроки(Чек.time_check);
					
					ККМ = ПолучитьЭлементСправочника(Чек.id_workplace, "КассыККМ");
					Если ККМ.Пустая() Тогда
						Сообщить("Внимание!!! Не найден ККМ " + Чек.id_workplace, СтатусСообщения.Важное);
					КонецЕсли;
					
					СтрокаТаблицыДокументов.ККМ = ККМ;
					СтрокаТаблицыДокументов.ПредставлениеСтрокиХамелеона = ККМ;
					
					СтрокаТаблицыДокументов.ТаблицаСтрокЧекаНаличные = ВернутьТаблицуСтрокиЧекаВнутр();
					СтрокаТаблицыДокументов.ТаблицаСтрокЧекаБезнал = ВернутьТаблицуБезнальныхПокупок();
					СтрокаТаблицыДокументов.ТаблицаДисконтныхПокупок = ВернутьТаблицуДисконтныхПокупок();
					СтрокаТаблицыДокументов.ДоСканирования = ДоСканирования;
					СтрокаТаблицыДокументов.ТипОплаты = ?(Чек.type_payment="0","0","1");
					
					Если Объект.РазделятьПоПринтеру Тогда
						СтрокаТаблицыДокументов.ПризнакОтраженияВУчете = ПризнакОтраженияВУчете;
					КонецЕсли;
				КонецЕсли;
				
				
				ТаблицаСтрокЧекаНаличные = СтрокаТаблицыДокументов.ТаблицаСтрокЧекаНаличные;
					
				Строка = ТаблицаСтрокЧекаНаличные.Добавить();
				Строка.Номенклатура	= Товар;
				Строка.ЕдИзм		= ЕдИзм;
				Строка.Серия		= Серия;
				Строка.Характеристика = Характеристика;
				Строка.quantity		= СтрокаЧека.quantity;
				Строка.price		= СтрокаЧека.price;
				Строка.discount		= СтрокаЧека.discount;
				Строка.summ			= СтрокаЧека.summ;
				
				СтрокаТаблицыДокументов.ТаблицаСтрокЧекаНаличные = ТаблицаСтрокЧекаНаличные;
				
				Если ДобавитьЧек = Истина Тогда
					
					Сообщить("ДобавитьЧек с " + Чек.time_check);
					
					ТаблицаСтрокЧекаБезнал = СтрокаТаблицыДокументов.ТаблицаСтрокЧекаБезнал;
					СтрокаБезнал = ТаблицаСтрокЧекаБезнал.Найти(Чек.id_check,"id_check");
					Если СтрокаБезнал = Неопределено Тогда
						СтрокаБезнал = ТаблицаСтрокЧекаБезнал.Добавить();
						СтрокаБезнал.ВидОплаты = Чек.type_payment;
						СтрокаБезнал.Сумма = Чек.sum_check/100;
						СтрокаТаблицыДокументов.ТаблицаСтрокЧекаБезнал = ТаблицаСтрокЧекаБезнал;
					КонецЕсли;
					ДобавитьЧек = Ложь;
				КонецЕсли;
				
				Если ДобавитьДисконт = Истина Тогда
					ТаблицаДисконтныхПокупок = СтрокаТаблицыДокументов.ТаблицаДисконтныхПокупок;
				
					Строка = ТаблицаДисконтныхПокупок.Добавить();
					Строка.Карточка	= ПолучитьЭлементСправочника(Чек.id_discount_card,"ИнформационныеКарты");
					Строка.Сумма	= Чек.sum_check/100;
					
					СтрокаТаблицыДокументов.ТаблицаДисконтныхПокупок = ТаблицаДисконтныхПокупок;
					ДобавитьДисконт = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	// Покажем пользователю табличку пусть выберет что загружать, а что нет
	Для Каждого ДанныеДляДокумента Из ТаблицаРозничныхПродаж Цикл
		
		Сообщить(ДанныеДляДокумента.ДатаДокумента);
		
		Запрос = Новый Запрос(); 
		Запрос.Текст = "ВЫБРАТЬ
			|	ОтчетОРозничныхПродажах.Ссылка
			|ИЗ
			|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
			|ГДЕ
			|	ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
			|	И ОтчетОРозничныхПродажах.Комментарий ПОДОБНО &ИндексПоиска
			|	И ОтчетОРозничныхПродажах.ПометкаУдаления = Ложь";
		//Запрос.Текст = "ВЫБРАТЬ
		//	|	ОтчетОРозничныхПродажах.Ссылка
		//	|ИЗ
		//	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		//	|ГДЕ
		//	|	ОтчетОРозничныхПродажах.Склад = &Склад
		//	|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
		//	|	И ОтчетОРозничныхПродажах.chm_ХамелеонИндексПоиска = &ИндексПоиска
		//	|	И ОтчетОРозничныхПродажах.ПометкаУдаления = Ложь";
		//Запрос.УстановитьПараметр("Склад", ДанныеДляДокумента.ККМ.chm_Склад); 
		Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ДанныеДляДокумента.ДатаДокумента));
		Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ДанныеДляДокумента.ДатаДокумента));
		Запрос.УстановитьПараметр("ИндексПоиска",ДанныеДляДокумента.ИндексПоиска); 
		
		ТЗ = Запрос.Выполнить().Выгрузить(); 
		Если ТЗ.Количество() = 0 Тогда  /// Тут создать документ 
			ДанныеДляДокумента.Документ = Неопределено;
			ДанныеДляДокумента.ПредставлениеДокумента = "<Новый> от " + Формат(ДанныеДляДокумента.ДатаДокумента, "ДФ=дд.ММ.yyyy");
		ИначеЕсли ТЗ.Количество() = 1 Тогда //// Тут получить по ссылке объект 
			ДанныеДляДокумента.Документ = ТЗ[0].Ссылка;
			ДанныеДляДокумента.ПредставлениеДокумента = Строка(ТЗ[0].Ссылка);
			Если ДанныеДляДокумента.Документ.Проведен Тогда
				ДанныеДляДокумента.ПредставлениеДокумента = ДанныеДляДокумента.ПредставлениеДокумента+" (Проведен)";
			КонецЕсли;
		Иначе  							////  Тут хз что делать !!!! 
			Сообщить("Существует несколько документов ОтчетОРозничныхПродажах по одной кассе за "+ДанныеДляДокумента.ДатаДокумента+", ККМ "+ДанныеДляДокумента.ККМ); 
			Возврат;
		КонецЕсли; 
		
	КонецЦикла;
	           
	ТаблицаРозничныхПродаж.ЗаполнитьЗначения(Истина, "Пометка");
	
	// Для всех проведенных документов снимим галочку загрузка
	Для Каждого Строка из ТаблицаРозничныхПродаж Цикл

		Если Строка.Документ = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда 
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Сохраняям результат
	КопироватьРеквизитыТаблицыЗначений(ТаблицаРозничныхПродаж, Объект.ТаблицаДокументов.Выгрузить(), "Объект.ТаблицаДокументов"); 
	Объект.ТаблицаДокументов.Загрузить(ТаблицаРозничныхПродаж);	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОтчетРозничныхПродаж()
	
	ТаблицаРозничныхПродаж = Объект.ТаблицаДокументов.Выгрузить();
	
	// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДанныеДляДокумента Из ТаблицаРозничныхПродаж Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДанныеДляДокумента.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа " + ДанныеДляДокумента.ПредставлениеСтрокиХамелеона);
		
		Если ДанныеДляДокумента.Документ = Неопределено Тогда
			Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			Док.Дата = КонецДня(ДанныеДляДокумента.ДатаДокумента);
			Док.Склад = Объект.Склад;
			// УЛУЧШИТЬ: 
			Эквайринг = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
			Док.ДоговорЭквайринга = Эквайринг; 	
			Док.Эквайрер = Эквайринг.Эквайрер; 
			Док.ДоговорВзаиморасчетовЭквайрера = Эквайринг.ДоговорВзаиморасчетов; 
			Док.СчетУчетаРасчетовСЭквайрером = ПланыСчетов.Хозрасчетный.НайтиПоКоду("333");
			
			Док.КассаККМ = ДанныеДляДокумента.ККМ;
			Док.Организация = ДанныеДляДокумента.ККМ.Владелец;
			Док.ОтражатьВУправленческомУчете = Истина;
			Если не ЗначениеЗаполнено(ДанныеДляДокумента.ПризнакОтраженияВУчете) Тогда
				Док.ОтражатьВБухгалтерскомУчете = Истина;
			ИначеЕсли Найти(ДанныеДляДокумента.ПризнакОтраженияВУчете,"F") > 1 Тогда
				Док.ОтражатьВБухгалтерскомУчете = Истина;
			КонецЕсли;
			Док.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах; 
			// ИСправить индекс поиска
			//Док.chm_ХамелеонИндексПоиска = ДанныеДляДокумента.ИндексПоиска;
			Док.Комментарий = ДанныеДляДокумента.ИндексПоиска;
			Док.Подразделение = Док.Склад.Подразделение;
			СтрокаКомментария = "";
			//Если ДанныеДляДокумента.ДоСканирования Тогда
			//	СтрокаКомментария = СтрокаКомментария + "После этого документа была инвентаризация";
			//КонецЕсли;
			//Если ДанныеДляДокумента.ТипОплаты = "0" Тогда
			//	СтрокаКомментария = СтрокаКомментария + " Ф2";
			//КонецЕсли;
			//Док.Комментарий = СтрокаКомментария;
			Док.СуммаВключаетНДС = Истина;
			Док.УчитыватьНДС = Истина;
			Док.АвторасчетНДС = Истина;
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				Док.СчетДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
				Док.СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы;
			КонецЕсли;
			
		Иначе
			Док = ДанныеДляДокумента.Документ.ПолучитьОбъект(); 
		КонецЕсли;
		
		// Очистим все таблицы документа
		Док.Товары.Очистить();
		Док.ОплатаПлатежнымиКартами.Очистить();
		Док.ПродажиПоДисконтнымКартам.Очистить();
		
		Для Каждого СтрокаЧека Из ДанныеДляДокумента.ТаблицаСтрокЧекаНаличные Цикл 	
			НоваяСтрока = Док.Товары.Добавить();
			НоваяСтрока.Номенклатура		= СтрокаЧека.Номенклатура;
			НоваяСтрока.СерияНоменклатуры	= СтрокаЧека.Серия;
			НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаЧека.Характеристика;
			НоваяСтрока.Количество 			= Число(СтрокаЧека.quantity);
			НоваяСтрока.Цена 				= Число(СтрокаЧека.price)/100;
			НоваяСтрока.ЕдиницаИзмерения    = СтрокаЧека.ЕдИзм;
			НоваяСтрока.СтавкаНДС			= СтрокаЧека.Номенклатура.СтавкаНДС;
			НоваяСтрока.Коэффициент 		= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Сумма 				= Число(СтрокаЧека.summ)/100;

			Если НоваяСтрока.Сумма = 0 Тогда
				НоваяСтрока.ПроцентСкидкиНаценки= 0;
			Иначе
				НоваяСтрока.ПроцентСкидкиНаценки= (-СтрокаЧека.discount)/НоваяСтрока.Сумма;
			КонецЕсли;
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
					БухгалтерскийУчет = "Заглушка";
				КонецЕсли;
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Док.Организация, НоваяСтрока.Номенклатура, Неопределено);
				НоваяСтрока.СхемаРеализации						= СчетаУчета.СхемаРеализации;
				НоваяСтрока.НалоговоеНазначение					= СчетаУчета.НалоговоеНазначение;
				//НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат	= СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;

		КонецЦикла; 
		
		Для Каждого СтрокаБезнала Из ДанныеДляДокумента.ТаблицаСтрокЧекаБезнал Цикл
			НоваяСтрока = Док.ОплатаПлатежнымиКартами.Добавить();
			// УЛУЧШИТЬ: 
			НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоКоду("00004");
			//НоваяСтрока.ВидОплаты				= СтрокаЧека.Товар;
			
			НоваяСтрока.Сумма 					= Число(СтрокаБезнала.Сумма);
			НоваяСтрока.ПроцентТорговойУступки 	= 0;
			НоваяСтрока.СуммаТорговойУступки    = 0;
		КонецЦикла;
		
		Для Каждого СтрокаДисконта Из ДанныеДляДокумента.ТаблицаДисконтныхПокупок Цикл
			НоваяСтрока = Док.ПродажиПоДисконтнымКартам.Добавить();
			НоваяСтрока.ДисконтнаяКарта			= СтрокаДисконта.Карточка;
			НоваяСтрока.ВладелецДисконтнойКарты = СтрокаДисконта.Карточка.ВладелецКарты;
			НоваяСтрока.Сумма 					= СтрокаДисконта.Сумма;
		КонецЦикла;
		
		
		// Свернем ТЧ Товары
		ВТ = Новый ТаблицаЗначений;
		ВТ = Док.Товары.Выгрузить();
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
			ВТ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Цена, ЕдиницаИзмерения, СтавкаНДС, Коэффициент, ПроцентСкидкиНаценки","Количество,Сумма");
		КонецЕсли;
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ВТ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Цена, ЕдиницаИзмерения, СтавкаНДС, Коэффициент, ПроцентСкидкиНаценки, СхемаРеализации, НалоговоеНазначение","Количество,Сумма");
		КонецЕсли;
		
		Док.Товары.Загрузить(ВТ);
		
		// Свернем ТЧ ОплатаПлатежнымиКартами
		ВТ = Новый ТаблицаЗначений;
		ВТ = Док.ОплатаПлатежнымиКартами.Выгрузить();
		ВТ.Свернуть("ВидОплаты,ПроцентТорговойУступки","Сумма,СуммаТорговойУступки");
		Док.ОплатаПлатежнымиКартами.Загрузить(ВТ);
		
		// Свернем ТЧ ПродажиПоДисконтнымКартам
		ВТ = Новый ТаблицаЗначений;
		ВТ = Док.ПродажиПоДисконтнымКартам.Выгрузить();
		ВТ.Свернуть("ДисконтнаяКарта,ВладелецДисконтнойКарты","Сумма");
		Док.ПродажиПоДисконтнымКартам.Загрузить(ВТ);
		
		
		// Установим время документов       
		//Если РазделятьПоПереоценке Тогда
		//	СтрокаТаблицыПереоценок = ТаблицаПереоценок.Найти(Строка(Число(ДанныеДляДокумента.ККМ.Код)),"НомерРабочегоМеста");
		//	Если НЕ СтрокаТаблицыПереоценок = Неопределено Тогда
		//		Если ДанныеДляДокумента.ДоСканирования Тогда
		//			Док.Дата = СтрокаТаблицыПереоценок.ВремяСканирования;
		//		Иначе
		//			Док.Дата = КонецДня(СтрокаТаблицыПереоценок.ВремяСканирования);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		
		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			
			Сообщить("Записан документ " + Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОтчетПоступленияТоваровУслуг(PostgreSQLObject, Отказ)
	
	ТаблицаПоступлений = ЗагрузитьТаблицуПоступлений(PostgreSQLObject, Отказ);
	ТаблицаПоступленийТоваровУслуг = ВернутьТаблицуПоступленийТоваровУслуг();  
	
	Для Каждого ДокументыТочки Из ТаблицаПоступлений Цикл
		Для Каждого ДокументПоступления Из ДокументыТочки.ДанныеПоступлений Цикл
			Склад = ПолучитьЭлементСправочника(ДокументПоступления.id_outlet, "Склады");
			
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			|	ПоступлениеТоваровУслуг.Ссылка
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.СкладОрдер = &Склад
			|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
			|	И ПоступлениеТоваровУслуг.Номер = &НомерДокумента"; 
			Запрос.УстановитьПараметр("Склад", Склад ); 
			Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ПреобразоватьВДату(ДокументПоступления.date_doc)));
			Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ПреобразоватьВДату(ДокументПоступления.date_doc)));
			Запрос.УстановитьПараметр("НомерДокумента", ДокументПоступления.number_doc); 
			
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
			
			//СтрокаПоступления = Объект.ТаблицаДокументов.Добавить();
			СтрокаПоступления = ТаблицаПоступленийТоваровУслуг.Добавить();
			
			СтрокаПоступления.Склад = Склад;    
			СтрокаПоступления.ПредставлениеСтрокиХамелеона = ""+СтрокаПоступления.Склад + " №: "+ДокументПоступления.number_doc;
			СтрокаПоступления.Пометка = Истина;
			
			Если РезультатЗапроса.Количество() = 0 Тогда  /// Тут создать документ 
				СтрокаПоступления.Документ = Неопределено;
				СтрокаПоступления.ПредставлениеДокумента = "<Новый>";
			ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда //// Тут получить по ссылке объект 
				СтрокаПоступления.Документ = РезультатЗапроса[0].Ссылка;
				СтрокаПоступления.ПредставлениеДокумента = Строка(РезультатЗапроса[0].Ссылка);
				Если СтрокаПоступления.Документ.Проведен Тогда
					СтрокаПоступления.ПредставлениеДокумента = СтрокаПоступления.ПредставлениеДокумента+" (Проведен)";
				КонецЕсли;
			Иначе  							////  Тут хз что делать !!!! 
				Сообщить("Существует несколько документов ПоступлениеТоваровУслуг с одним номером "+ДокументПоступления.number); 
				Возврат;
			КонецЕсли; 
			
			Для Каждого Колонка ИЗ ДокументыТочки.ДанныеПоступлений.Колонки Цикл 
				СтрокаПоступления[Колонка.Имя] = ДокументПоступления[Колонка.Имя]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Для всех проведенных документов снимим галочку загрузка
	//Для Каждого Строка из Объект.ТаблицаДокументов Цикл
	Для Каждого Строка из ТаблицаПоступленийТоваровУслуг Цикл
		Если Строка.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Сохраняям результат
	КопироватьРеквизитыТаблицыЗначений(ТаблицаПоступленийТоваровУслуг, Объект.ТаблицаДокументов.Выгрузить(), "Объект.ТаблицаДокументов"); 
	Объект.ТаблицаДокументов.Загрузить(ТаблицаПоступленийТоваровУслуг);	

КонецПроцедуры

&НаСервере
Процедура СохранитьПоступлениеТоваровУслуг()
	Перем ВалютаРегламентированногоУчета;
	Перем ПараметрОснование;
	Перем ПараметрОбъектКопирования;

	ТаблицаПоступлений = Объект.ТаблицаДокументов.Выгрузить();

	// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДокументПоступления Из ТаблицаПоступлений Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДокументПоступления.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа " + ДокументПоступления.ПредставлениеСтрокиХамелеона);
		
		Если ДокументПоступления.Документ = Неопределено Тогда  /// Тут создать документ 
			Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			Док.Дата = ПреобразоватьВДату(ДокументПоступления.date_doc);
			
			Док.Номер = ДокументПоступления.number_doc;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"), 
				ВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);		
			РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
				глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");
				
			Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			Док.Контрагент = ПолучитьЭлементСправочника(ДокументПоступления.id_client,"Контрагенты");
			Док.ДоговорКонтрагента = Док.Контрагент.ОсновнойДоговорКонтрагента;
			Док.ТипЦен = Док.ДоговорКонтрагента.ТипЦен;
			Док.Организация = Док.ДоговорКонтрагента.Организация;
			Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Док.РегистрироватьЦеныПоставщика = Истина;
			Док.ОтражатьВБухгалтерскомУчете = Истина;
			Док.ОтражатьВУправленческомУчете = Истина;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете",Док.Метаданные()) Тогда
				Док.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли; 
			
			Док.СкладОрдер = ДокументПоступления.Склад; 
			Док.Подразделение = Док.СкладОрдер.Подразделение;
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов, Док.Дата);
			Док.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
			Док.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Док.СуммаВключаетНДС = Истина;
			Док.УчитыватьНДС = Истина;
			
		Иначе //// Тут получить по ссылке объект 
			Док = ДокументПоступления.Документ.ПолучитьОбъект(); 
		КонецЕсли; 
		
		// Очистим все таблицы документа
		Док.Товары.Очистить();
		
		Для Каждого СтрокаДокумента Из ДокументПоступления.СтрокиДокумента Цикл 	
			НоваяСтрока = Док.Товары.Добавить();
			
			// ИСПРАВИТЬ ПолучитьЭлементСправочника
			//НоваяСтрока.Номенклатура		= ПолучитьЭлементСправочника(СтрокаДокумента.id_goods, "Номенклатура");
			Товар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДокумента.id_goods);
			Если Товар.Пустая() Тогда
				Сообщить("Внимание!!! Не найден товар " + СтрокаДокумента.id_goods, СтатусСообщения.Важное);
			КонецЕсли;
				
			НоваяСтрока.Номенклатура		= Товар;				
			НоваяСтрока.Количество 			= Число(СтрокаДокумента.quantity);
			НоваяСтрока.Цена 				= Число(СтрокаДокумента.price)/100;
			НоваяСтрока.ЕдиницаИзмерения    = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент 		= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Сумма 				= НоваяСтрока.Цена * НоваяСтрока.Количество;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док,"Приобретение"); 
			
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			Док.Контрагент, Док.ТипЦен, Док.ДоговорКонтрагента, Док.Дата,Док.ВалютаДокумента, Док.УчитыватьНДС,Док.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрока, Док, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета); 
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);
			
			УчетСерийныхНомеров.ПроверитьСерийныеНомера(НоваяСтрока, Док);
			
			//ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВБухгалтерскомУчете);
			
			
		КонецЦикла; 
		
		//// Свернем ТЧ Товары
		//ВТ = Новый ТаблицаЗначений;
		//ВТ = Док.Товары.Выгрузить();
		//ВТ.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, Коэффициент, ПроцентСкидкиНаценки","Количество,Сумма");
		//Док.Товары.Загрузить(ВТ);
		
		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
		
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВозвратТоваровПоставщику(PostgreSQLObject, Отказ)
	Перем мВалютаРегламентированногоУчета;
	Перем ПараметрОснование;
	Перем ПараметрОбъектКопирования;

	ТаблицаВозвратов = ЗагрузитьТаблицуВозвратов(PostgreSQLObject, Отказ);

	Объект.ТаблицаДокументов.Очистить();
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Очистить();

	Объект.ТаблицаДокументов = ВернутьТаблицуВозвратов();
	
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Добавить("Склад");
	КолонкиТаблицыДокументов.Добавить("Документ");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеДокумента");
	КолонкиТаблицыДокументов.Добавить("Пометка");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеСтрокиХамелеона");
	
	Для Каждого ДокументыТочки Из ТаблицаВозвратов Цикл
		Для Каждого ДокументВозврата Из ДокументыТочки.ДанныеВозвратов Цикл
			Склад = ПолучитьЭлементСправочника(ДокументВозврата.id_outlet,"Склады");
			
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщику.Ссылка
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
			|ГДЕ
			|	ВозвратТоваровПоставщику.Склад = &Склад
			|	И ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
			|	И ВозвратТоваровПоставщику.Номер = &НомерДокумента"; 
			Запрос.УстановитьПараметр("Склад", Склад ); 
			Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ПреобразоватьВДату(ДокументВозврата.date_doc)));
			Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ПреобразоватьВДату(ДокументВозврата.date_doc)));
			Запрос.УстановитьПараметр("НомерДокумента",ДокументВозврата.number_doc); 
			
			ТЗ = Запрос.Выполнить().Выгрузить(); 
			
			СтрокаВозврата = Объект.ТаблицаДокументов.Добавить();
			
			СтрокаВозврата.Склад = Склад;
			СтрокаВозврата.ПредставлениеСтрокиХамелеона = ""+СтрокаВозврата.Склад + " №: "+ДокументВозврата.number_doc;
			СтрокаВозврата.Пометка = Истина;
			
			Если ТЗ.Количество() = 0 Тогда  /// Тут создать документ 
				СтрокаВозврата.Документ = Неопределено;
				СтрокаВозврата.ПредставлениеДокумента = "<Новый>";
			ИначеЕсли ТЗ.Количество() = 1 Тогда //// Тут получить по ссылке объект 
				СтрокаВозврата.Документ = ТЗ[0].Ссылка;
				СтрокаВозврата.ПредставлениеДокумента = Строка(ТЗ[0].Ссылка);
				Если СтрокаВозврата.Документ.Проведен Тогда
					СтрокаВозврата.ПредставлениеДокумента = СтрокаВозврата.ПредставлениеДокумента+" (Проведен)";
				КонецЕсли;
			Иначе  							////  Тут хз что делать !!!! 
				Сообщить("Существует несколько документов ВозвратТоваровПоставщику с одним номером "+ДокументВозврата.number); 
				Возврат;
			КонецЕсли; 
			
			Для Каждого Колонка ИЗ ДокументыТочки.ДанныеВозвратов.Колонки Цикл 
				СтрокаВозврата[Колонка.Имя] = ДокументВозврата[Колонка.Имя]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Для всех проведенных документов снимим галочку загрузка
	Для Каждого Строка из Объект.ТаблицаДокументов Цикл
		Если Строка.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодтверждения = ПолучитьФорму("ФормаПодтвержденияЗагрузка");
	
	ТабличноеПоле = ФормаПодтверждения.ЭлементыФормы.ТаблицаДокументовДляПодтверждения;
	ТабличноеПоле.Колонки.Добавить("ПредставлениеДокумента","Документ в базе");
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Если Колонка.Имя = "Загружать" Тогда
			Колонка.Данные = "ПредставлениеСтрокиХамелеона";
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "ПредставлениеДокумента" Тогда
			Колонка.Данные = "ПредставлениеДокумента";
		КонецЕсли; 
		Колонка.Видимость = Истина;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла; 
	
	ПараметрЗакрытия = ФормаПодтверждения.ОткрытьМодально();
	
	Если НЕ ПараметрЗакрытия = "Выполнить" Тогда
		Сообщить("Обработка отменена",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	
	// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДокументВозврата Из Объект.ТаблицаДокументов Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДокументВозврата.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа "+ДокументВозврата.ПредставлениеСтрокиХамелеона);
		
		Если ДокументВозврата.Документ = Неопределено Тогда  /// Тут создать документ 
			Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			Док.Дата = ПреобразоватьВДату(ДокументВозврата.date_doc);
			
			Док.Номер = ДокументВозврата.number_doc;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);		
			РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");
			
			Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
			//Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			Док.Контрагент = ПолучитьЭлементСправочника(ДокументВозврата.id_client,"Контрагенты");
			Док.ДоговорКонтрагента = Док.Контрагент.ОсновнойДоговорКонтрагента;
			Док.ТипЦен = Док.ДоговорКонтрагента.ТипЦен;
			Док.Организация = Док.ДоговорКонтрагента.Организация;
			Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Док.ОтражатьВБухгалтерскомУчете = Истина;
			Док.ОтражатьВУправленческомУчете = Истина;
			Попытка
				Док.ОтражатьВНалоговомУчете = Истина;
			Исключение КонецПопытки;
			Док.Склад = ДокументВозврата.Склад; 
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов, Док.Дата);
			Док.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			Док.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Док.СуммаВключаетНДС = Истина;
			Док.УчитыватьНДС = Истина;
			
		Иначе //// Тут получить по ссылке объект 
			Док = ДокументВозврата.Документ.ПолучитьОбъект(); 
		КонецЕсли; 
		
		// Очистим все таблицы документа
		Док.Товары.Очистить();
		
		Для Каждого СтрокаДокумента Из ДокументВозврата.СтрокиДокумента Цикл 	
			НоваяСтрока = Док.Товары.Добавить();
			НоваяСтрока.Номенклатура		= ПолучитьЭлементСправочника(СтрокаДокумента.id_goods,"Номенклатура");
			НоваяСтрока.Количество 			= Число(СтрокаДокумента.quantity);
			//НоваяСтрока.Цена 				= Число(СтрокаДокумента.price)/100;
			НоваяСтрока.ЕдиницаИзмерения    = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент 		= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			//НоваяСтрока.Сумма 				= Число(СтрокаДокумента.summ)/100;
			НоваяСтрока.Качество			= Справочники.Качество.Новый;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док,"Приобретение"); 
			
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			Док.Контрагент, Док.ТипЦен, Док.ДоговорКонтрагента, Док.Дата,Док.ВалютаДокумента, Док.УчитыватьНДС,Док.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрока, Док, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);
			
			УчетСерийныхНомеров.ПроверитьСерийныеНомера(НоваяСтрока, Док);
			
			//ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВБухгалтерскомУчете);
			
			
		КонецЦикла; 
		
		//// Свернем ТЧ Товары
		//ВТ = Новый ТаблицаЗначений;
		//ВТ = Док.Товары.Выгрузить();
		//ВТ.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, Коэффициент, ПроцентСкидкиНаценки","Количество,Сумма");
		//Док.Товары.Загрузить(ВТ);
		
		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
		
	КонецЦикла;		


КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПеремещениеТоваров(PostgreSQLObject, Отказ)
	Перем мВалютаРегламентированногоУчета;
	Перем ПараметрОснование;
	Перем ПараметрОбъектКопирования;
	
	ТаблицаПеремещений = ЗагрузитьТаблицуПеремещений(PostgreSQLObject, Отказ);

	Объект.ТаблицаДокументов.Очистить();
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Очистить();
	
	Объект.ТаблицаДокументов = ВернутьТаблицуПеремещений();
	
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Добавить("СкладОтправитель");
	КолонкиТаблицыДокументов.Добавить("СкладПолучатель");
	КолонкиТаблицыДокументов.Добавить("Документ");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеДокумента");
	КолонкиТаблицыДокументов.Добавить("Пометка");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеСтрокиХамелеона");
	
	// Сформируем документы на основании таблицы ТаблицаПоступлений
	Для Каждого ДокументыТочки Из ТаблицаПеремещений Цикл
		Для Каждого ДокументПеремещения Из ДокументыТочки.ДанныеПеремещений Цикл
			
			Склад = ПолучитьЭлементСправочника(ДокументПеремещения.id_outlet,"Склады");
			МОЛ = ПолучитьЭлементСправочника(ДокументПеремещения.id_employee_client,"ФизическиеЛица");
			
			Если Число(ДокументПеремещения.type_doc) = 1 Тогда // Расход
				СкладОтправитель = Склад;
				СкладПолучатель = МОЛ.chm_Склад;
			ИначеЕсли Число(ДокументПеремещения.type_doc) = 0 Тогда // Приход
				СкладОтправитель = МОЛ.chm_Склад;
				СкладПолучатель = Склад;
			Иначе
				Сообщить("Ошибка определения типа документа: "+ДокументПеремещения.number);
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			|	ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
			|	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель
			|	И ПеремещениеТоваров.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
			|	И ПеремещениеТоваров.Номер = &НомерДокумента"; 
			Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель ); 
			Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель ); 
			Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ПреобразоватьВДату(ДокументПеремещения.date_doc)));
			Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ПреобразоватьВДату(ДокументПеремещения.date_doc)));
			Запрос.УстановитьПараметр("НомерДокумента",ДокументПеремещения.number_doc); 
			
			ТЗ = Запрос.Выполнить().Выгрузить(); 
			
			СтрокаПеремещения = Объект.ТаблицаДокументов.Добавить();
			
			СтрокаПеремещения.СкладОтправитель = СкладОтправитель;
			СтрокаПеремещения.СкладПолучатель = СкладПолучатель;
			СтрокаПеремещения.ПредставлениеСтрокиХамелеона = ""+СтрокаПеремещения.СкладОтправитель + " -> " + СтрокаПеремещения.СкладПолучатель +" №: "+ДокументПеремещения.number_doc;
			СтрокаПеремещения.Пометка = Истина;
				
			Если ТЗ.Количество() = 0 Тогда  /// Тут создать документ 
				СтрокаПеремещения.Документ = Неопределено;
				СтрокаПеремещения.ПредставлениеДокумента = "<Новый>";
			ИначеЕсли ТЗ.Количество() = 1 Тогда //// Тут получить по ссылке объект 
				СтрокаПеремещения.Документ = ТЗ[0].Ссылка;
				СтрокаПеремещения.ПредставлениеДокумента = Строка(ТЗ[0].Ссылка);
				Если СтрокаПеремещения.Документ.Проведен Тогда
					СтрокаПеремещения.ПредставлениеДокумента = СтрокаПеремещения.ПредставлениеДокумента+" (Проведен)";
				КонецЕсли;
			Иначе  							////  Тут хз что делать !!!! 
				Сообщить("Существует несколько документов ПеремещениеТоваров с одним номером "+ДокументПеремещения.number); 
				Возврат;
			КонецЕсли; 
			
			Для Каждого Колонка ИЗ ДокументыТочки.ДанныеПеремещений.Колонки Цикл 
				СтрокаПеремещения[Колонка.Имя] = ДокументПеремещения[Колонка.Имя]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Для всех проведенных документов снимим галочку загрузка
	Для Каждого Строка из Объект.ТаблицаДокументов Цикл
		Если Строка.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодтверждения = ПолучитьФорму("ФормаПодтвержденияЗагрузка");
	
	ТабличноеПоле = ФормаПодтверждения.ЭлементыФормы.ТаблицаДокументовДляПодтверждения;
	ТабличноеПоле.Колонки.Добавить("ПредставлениеДокумента","Документ в базе");
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Если Колонка.Имя = "Загружать" Тогда
			Колонка.Данные = "ПредставлениеСтрокиХамелеона";
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "ПредставлениеДокумента" Тогда
			Колонка.Данные = "ПредставлениеДокумента";
		КонецЕсли; 
		Колонка.Видимость = Истина;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла; 
	
	ПараметрЗакрытия = ФормаПодтверждения.ОткрытьМодально();
	
	Если НЕ ПараметрЗакрытия = "Выполнить" Тогда
		Сообщить("Обработка отменена",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
		// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДокументПеремещения Из Объект.ТаблицаДокументов Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДокументПеремещения.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа "+ДокументПеремещения.ПредставлениеСтрокиХамелеона);
		
		Если ДокументПеремещения.Документ = Неопределено Тогда  /// Тут создать документ 
			
			Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Док.Дата = ПреобразоватьВДату(ДокументПеремещения.date_doc);
			
			Док.Номер = ДокументПеремещения.number_doc;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования, ПараметрОснование);
			
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(Док, глЗначениеПеременной("глТекущийПользователь"));
			КонецЕсли;
			
			Док.ВидОперации  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
			Док.СкладОтправитель = ДокументПеремещения.СкладОтправитель;
			Док.СкладПолучатель  = ДокументПеремещения.СкладПолучатель;

	    Иначе //// Тут получить по ссылке объект 
			Док = ДокументПеремещения.Документ.ПолучитьОбъект(); 
		КонецЕсли; 
	
		// Очистим все таблицы документа
		Док.Товары.Очистить();
		Док.ВозвратнаяТара.Очистить();
		
		Для Каждого СтрокаДокумента Из ДокументПеремещения.СтрокиДокумента Цикл
			Номенклатура		= ПолучитьЭлементСправочника(СтрокаДокумента.id_goods,"Номенклатура");
			
			НоваяСтрока = Док.Товары.Добавить();
			НоваяСтрока.Номенклатура		= Номенклатура;
			НоваяСтрока.Количество 			= Число(СтрокаДокумента.quantity);
			//НоваяСтрока.Цена 				= Число(СтрокаДокумента.price)/100;
			//НоваяСтрока.ЕдиницаИзмерения    = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			//НоваяСтрока.Коэффициент 		= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			//НоваяСтрока.Сумма 				= Число(СтрокаДокумента.summ)/100;
			
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);
			
			// Берем из самого реквизита Номенклатура
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, Док);
			
			НоваяСтрока.Качество = Справочники.Качество.Новый;
			
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				НоваяСтрока.СтавкаНДСВРознице = НоваяСтрока.Номенклатура.СтавкаНДС;
				НоваяСтрока.СуммаВРознице = НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЕсли;
			
			// Для конфигурации УТ необходима такая заглушка т.к. отсутствует общий модуль "БухгалтерскийУчет";
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
				БухгалтерскийУчет = "Заглушка";
			КонецЕсли;
			
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				НоваяСтрока.СчетУчетаБУ		= БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Док.Организация, НоваяСтрока.Номенклатура, СкладОтправитель);
				НоваяСтрока.НовыйСчетУчетаБУ = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Док.Организация, НоваяСтрока.Номенклатура, СкладПолучатель);
			КонецЕсли;

		КонецЦикла; 
		
		//// Свернем ТЧ Товары
		//ВТ = Новый ТаблицаЗначений;
		//ВТ = Док.Товары.Выгрузить();
		//ВТ.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, Коэффициент, ПроцентСкидкиНаценки","Количество,Сумма");
		//Док.Товары.Загрузить(ВТ);

		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнвентаризациюТоваровНаСкладе(PostgreSQLObject, Отказ)
	Перем мВалютаУпрУчета;
	Перем мВалютаРегламентированногоУчета;
	Перем мКурсУпрУчета;
	Перем мКратностьУпрУчета;

	ТаблицаИнвентаризаций = ЗагрузитьТаблицуИнвентаризаций(PostgreSQLObject, Отказ);
	
	Объект.ТаблицаДокументов.Очистить();
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Очистить();
	
	Объект.ТаблицаДокументов = ВернутьТаблицуИнвентаризаций();
	
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Добавить("Склад");
	КолонкиТаблицыДокументов.Добавить("Документ");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеДокумента");
	КолонкиТаблицыДокументов.Добавить("Пометка");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеСтрокиХамелеона");
	
	
	// Сформируем документы на основании таблицы ТаблицаИнвентаризаций
	Для Каждого ДокументыТочки Из ТаблицаИнвентаризаций Цикл
		Для Каждого ДокументИнвентаризация Из ДокументыТочки.ДанныеИнвентаризаций Цикл
			
			Склад = ПолучитьЭлементСправочника(ДокументИнвентаризация.id_outlet,"Склады");
			
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			|	ИнвентаризацияТоваровНаСкладе.Ссылка
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
			|ГДЕ
			|	ИнвентаризацияТоваровНаСкладе.Склад = &Склад
			|	И ИнвентаризацияТоваровНаСкладе.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
			|	И ИнвентаризацияТоваровНаСкладе.Номер = &НомерДокумента"; 
			Запрос.УстановитьПараметр("Склад", Склад ); 
			Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ПреобразоватьВДату(ДокументИнвентаризация.date_doc)));
			Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ПреобразоватьВДату(ДокументИнвентаризация.date_doc)));
			Запрос.УстановитьПараметр("НомерДокумента",ДокументИнвентаризация.number_doc); 
			
			ТЗ = Запрос.Выполнить().Выгрузить(); 
			
			СтрокаИнвентаризации = Объект.ТаблицаДокументов.Добавить();
			
			СтрокаИнвентаризации.Склад = Склад;
			СтрокаИнвентаризации.ПредставлениеСтрокиХамелеона = ""+СтрокаИнвентаризации.Склад + " №: "+ДокументИнвентаризация.number_doc + ?(ДокументИнвентаризация.transfer = "1", " передачей" , " без передачи");
			СтрокаИнвентаризации.Пометка = Истина;
			
			Если ТЗ.Количество() = 0 Тогда  /// Тут создать документ 
				СтрокаИнвентаризации.Документ = Неопределено;
				СтрокаИнвентаризации.ПредставлениеДокумента = "<Новый>";
			ИначеЕсли ТЗ.Количество() = 1 Тогда //// Тут получить по ссылке объект 
				СтрокаИнвентаризации.Документ = ТЗ[0].Ссылка;
				СтрокаИнвентаризации.ПредставлениеДокумента = Строка(ТЗ[0].Ссылка);
				Если СтрокаИнвентаризации.Документ.Проведен Тогда
					СтрокаИнвентаризации.ПредставлениеДокумента = СтрокаИнвентаризации.ПредставлениеДокумента+" (Проведен)";
				КонецЕсли;
			Иначе  							////  Тут хз что делать !!!! 
				Сообщить("Существует несколько документов Инвентаризация с одним номером "+ДокументИнвентаризация.number); 
				Возврат;
			КонецЕсли; 
			
			Для Каждого Колонка ИЗ ДокументыТочки.ДанныеИнвентаризаций.Колонки Цикл 
				СтрокаИнвентаризации[Колонка.Имя] = ДокументИнвентаризация[Колонка.Имя]; 
			КонецЦикла;
			
			
		КонецЦикла;
	КонецЦикла;		
	
	// Для всех проведенных документов снимим галочку загрузка
	Для Каждого Строка из Объект.ТаблицаДокументов Цикл
		Если Строка.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодтверждения = ПолучитьФорму("ФормаПодтвержденияЗагрузка");
	
	ТабличноеПоле = ФормаПодтверждения.ЭлементыФормы.ТаблицаДокументовДляПодтверждения;
	ТабличноеПоле.Колонки.Добавить("ПредставлениеДокумента","Документ в базе");
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Если Колонка.Имя = "Загружать" Тогда
			Колонка.Данные = "ПредставлениеСтрокиХамелеона";
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "ПредставлениеДокумента" Тогда
			Колонка.Данные = "ПредставлениеДокумента";
		КонецЕсли; 
		Колонка.Видимость = Истина;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла; 
	
	ПараметрЗакрытия = ФормаПодтверждения.ОткрытьМодально();
	
	Если НЕ ПараметрЗакрытия = "Выполнить" Тогда
		Сообщить("Обработка отменена",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДокументИнвентаризации Из Объект.ТаблицаДокументов Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДокументИнвентаризации.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа "+ДокументИнвентаризации.ПредставлениеСтрокиХамелеона);
		
		Если ДокументИнвентаризации.Документ = Неопределено Тогда  /// Тут создать документ 
			
			Док = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
			Док.Дата = ПреобразоватьВДату(ДокументИнвентаризации.date_doc);
			
			Док.Номер = ДокументИнвентаризации.number_doc;
			//Док.Организация = 
			Док.Склад = ДокументИнвентаризации.Склад;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"), , , , );
			
			//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);		
			//РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");
			//
			//
			//Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			////Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			//Док.Контрагент = ПолучитьЭлементСправочника(ДокументПоступления.id_supplier,"Контрагенты");
			//Док.ДоговорКонтрагента = Док.Контрагент.ОсновнойДоговорКонтрагента;
			//Док.ТипЦен = Док.ДоговорКонтрагента.ТипЦен;
			//Док.Организация = Док.ДоговорКонтрагента.Организация;
			//Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			//
			//Док.ОтражатьВБухгалтерскомУчете = Истина;
			//Док.ОтражатьВУправленческомУчете = Истина;
			//
			//Док.СкладОрдер = Склад; 
			//
			//СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов, Док.Дата);
			//Док.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			//Док.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		Иначе
			Док = ДокументИнвентаризации.Документ.ПолучитьОбъект(); 
		КонецЕсли; 
		
		// Очистим все таблицы документа
		Док.Товары.Очистить();
		
		Для Каждого СтрокаДокумента Из ДокументИнвентаризации.СтрокиДокумента Цикл 	
			
			НоваяСтрока = Док.Товары.Добавить();
			
			НоваяСтрока.Номенклатура		= ПолучитьЭлементСправочника(СтрокаДокумента.id_goods,"Номенклатура");
			НоваяСтрока.ЕдиницаИзмерения    = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.ЕдиницаИзмеренияМест= НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			
			//КоличествоМест
			//КоличествоУчет
			НоваяСтрока.Коэффициент 		= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			//Сумма
			//СуммаУчет
			//ХарактеристикаНоменклатуры
			НоваяСтрока.Цена				= 0;
			//ЦенаВРознице
			//СерияНоменклатуры
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(НоваяСтрока, Док);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, Док);		
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, Док, Ложь);
			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Док.ЭлементыФормы.Товары.ТекущиеДанные, Док);
			НоваяСтрока.СуммаРегл       = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, мВалютаУпрУчета, 
			мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
			
			НоваяСтрока.Качество		= Справочники.Качество.Новый;
			НоваяСтрока.Количество		= Число(СтрокаДокумента.quantity_actual);
			
		КонецЦикла; 
		
		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКассовыеДокументы(PostgreSQLObject, Отказ)
	Перем мВалютаРегламентированногоУчета;
	Перем ПараметрОснование;
	Перем ПараметрОбъектКопирования;
	ТаблицаКассовых = ЗагрузитьТаблицуКассовых(PostgreSQLObject, Отказ);
	
	Объект.ТаблицаДокументов.Очистить();
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Очистить();
	
	Объект.ТаблицаДокументов = ВернутьТаблицуКассовых();
	
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Добавить("ККМ");
	КолонкиТаблицыДокументов.Добавить("Документ");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеДокумента");
	КолонкиТаблицыДокументов.Добавить("Пометка");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеСтрокиХамелеона");
	
	// Сформируем документы на основании таблицы
	Для Каждого ДокументыТочки Из ТаблицаКассовых Цикл
		Для Каждого ДокументКассовый Из ДокументыТочки.ДанныеКассовых Цикл
			
			ККМ = ПолучитьЭлементСправочника(ДокументКассовый.id_workplace,"КассыККМ");
			
			Запрос = Новый Запрос(); 
			// Документы с типом Контроль будем считать приходом
			Если (Число(ДокументКассовый.type_doc) = 0) или (Число(ДокументКассовый.type_doc) = 2) Тогда // Приход
				Запрос.Текст = "ВЫБРАТЬ
				|	ПриходныйКассовыйОрдер.Ссылка
				|ИЗ
				|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
				|ГДЕ
				|	ПриходныйКассовыйОрдер.Касса = &ККМ
				|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
				|	И ПриходныйКассовыйОрдер.Номер = &НомерДокумента"; 
			ИначеЕсли Число(ДокументКассовый.type_doc) = 1 Тогда // Расход
				Запрос.Текст = "ВЫБРАТЬ
				|	РасходныйКассовыйОрдер.Ссылка
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
				|ГДЕ
				|	РасходныйКассовыйОрдер.Касса = &ККМ
				|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоДняДата И &КонецДняДата
				|	И РасходныйКассовыйОрдер.Номер = &НомерДокумента"; 
			Иначе
				Продолжить;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ККМ", ККМ.chm_Касса ); 
			Запрос.УстановитьПараметр("НачалоДняДата", НачалоДня(ПреобразоватьВДату(ДокументКассовый.date_doc)));
			Запрос.УстановитьПараметр("КонецДняДата", КонецДня(ПреобразоватьВДату(ДокументКассовый.date_doc)));
			Запрос.УстановитьПараметр("НомерДокумента",ДокументКассовый.number_doc); 
			
			ТЗ = Запрос.Выполнить().Выгрузить(); 
			
			СтрокаКассовых = Объект.ТаблицаДокументов.Добавить();
			
			СтрокаКассовых.ККМ = ККМ;
			
			Если (Число(ДокументКассовый.type_doc) = 0) или (Число(ДокументКассовый.type_doc) = 2) Тогда // Приход
				ТипДвижения = " приход";
			ИначеЕсли Число(ДокументКассовый.type_doc) = 1 Тогда // Расход
				ТипДвижения = " расход";
			Иначе
				ТипДвижения = " контроль";
			КонецЕсли;
			
			СтрокаКассовых.ПредставлениеСтрокиХамелеона = ""+СтрокаКассовых.ККМ + " №: "+ДокументКассовый.number_doc + ТипДвижения;
			СтрокаКассовых.Пометка = Истина;
			
			Если ТЗ.Количество() = 0 Тогда  /// Тут создать документ 
				СтрокаКассовых.Документ = Неопределено;
				СтрокаКассовых.ПредставлениеДокумента = "<Новый>";
			ИначеЕсли ТЗ.Количество() = 1 Тогда //// Тут получить по ссылке объект 
				СтрокаКассовых.Документ = ТЗ[0].Ссылка;
				СтрокаКассовых.ПредставлениеДокумента = Строка(ТЗ[0].Ссылка);
				Если СтрокаКассовых.Документ.Проведен Тогда
					СтрокаКассовых.ПредставлениеДокумента = СтрокаКассовых.ПредставлениеДокумента+" (Проведен)";
				КонецЕсли;
			Иначе  							////  Тут хз что делать !!!! 
				Сообщить("Существует несколько кассовых документов с одним номером "+ДокументКассовый.number); 
				Возврат;
			КонецЕсли; 
			
			Для Каждого Колонка ИЗ ДокументыТочки.ДанныеКассовых.Колонки Цикл 
				СтрокаКассовых[Колонка.Имя] = ДокументКассовый[Колонка.Имя]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Для всех проведенных документов снимим галочку загрузка
	Для Каждого Строка из Объект.ТаблицаДокументов Цикл
		Если Строка.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Документ.Проведен Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодтверждения = ПолучитьФорму("ФормаПодтвержденияЗагрузка");
	
	ТабличноеПоле = ФормаПодтверждения.ЭлементыФормы.ТаблицаДокументовДляПодтверждения;
	ТабличноеПоле.Колонки.Добавить("ПредставлениеДокумента","Документ в базе");
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Если Колонка.Имя = "Загружать" Тогда
			Колонка.Данные = "ПредставлениеСтрокиХамелеона";
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "ПредставлениеДокумента" Тогда
			Колонка.Данные = "ПредставлениеДокумента";
		КонецЕсли; 
		Колонка.Видимость = Истина;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла; 
	
	ПараметрЗакрытия = ФормаПодтверждения.ОткрытьМодально();
	
	Если НЕ ПараметрЗакрытия = "Выполнить" Тогда
		Сообщить("Обработка отменена",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// Сформируем документы на основании таблицы ТаблицаДокументов
	Для Каждого ДокументКассовый Из Объект.ТаблицаДокументов Цикл
		
		Состояние("");
		
		// Пропустим неотмеченные документы
		Если НЕ ДокументКассовый.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Формирование документа "+ДокументКассовый.ПредставлениеСтрокиХамелеона);
		
		Если ДокументКассовый.Документ = Неопределено Тогда  /// Тут создать документ 
			
			Если (Число(ДокументКассовый.type_doc) = 0) или (Число(ДокументКассовый.type_doc) = 2) Тогда // Приход
				Док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ИначеЕсли Число(ДокументКассовый.type_doc) = 1 Тогда // Расход
				Док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			КонецЕсли;
			
			Док.Дата = ПреобразоватьВДату(ДокументКассовый.date_doc);
			
			Док.Номер = ДокументКассовый.number_doc;
			
			// Заполнить реквизиты значениями по умолчанию.		
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(Док, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,Док.РасшифровкаПлатежа,ПараметрОбъектКопирования);
			
			//мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Док.Дата,Док.Организация);
			
			Док.ОтражатьВУправленческомУчете = Истина;
			Док.ОтражатьВБухгалтерскомУчете = Истина;
			//Док.ОтражатьВНалоговомУчете = Истина;
			
			
		Иначе //// Тут получить по ссылке объект 
			Док = ДокументКассовый.Документ.ПолучитьОбъект(); 
		КонецЕсли; 
		
		Док.Касса = ДокументКассовый.ККМ.chm_Касса;
		Док.СтатьяДвиженияДенежныхСредств = ПолучитьЭлементСправочника(ДокументКассовый.id_cash_flow,"СтатьиДвиженияДенежныхСредств");
		Док.СуммаДокумента = ДокументКассовый.summ/100;
		
		Док.РасшифровкаПлатежа.Очистить();
		
		Если (Число(ДокументКассовый.type_doc) = 0) или (Число(ДокументКассовый.type_doc) = 2) Тогда // Приход
			Док.ПриемРозничнойВыручки.Очистить();
		КонецЕсли;
		
		Строка = Док.РасшифровкаПлатежа.Добавить();
		Строка.КурсВзаиморасчетов = 1;
		Строка.СуммаПлатежа = Док.СуммаДокумента;
		Строка.КратностьВзаиморасчетов = 1;
		Строка.СуммаВзаиморасчетов = Док.СуммаДокумента;
		Строка.ЗаТару = Ложь;
		Строка.СтатьяДвиженияДенежныхСредств = Док.СтатьяДвиженияДенежныхСредств;
		
		//Док.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним,Ложь);
		Попытка 
			
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
	КонецЦикла;


КонецПроцедуры

&НаСервере
Функция ЗагрузитьТаблицуПеремещений(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерТорговойТочки");
	РезультатКолонки.Добавить("ДанныеПеремещений");
	
	ТаблицаПеремещений = ВернутьТаблицуПеремещений();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'"; 
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'"; 

	СтрокаЗапроса = "SELECT * FROM spring.doc_movement_head WHERE date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	СтрокаЗапроса = СтрокаЗапроса + " AND status != 0";
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыТаблицаПеремещений = ТаблицаПеремещений.Добавить();
		Для Каждого Колонка ИЗ ТаблицаПеремещений.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			СтрокаТаблицыТаблицаПеремещений[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		СтрокаТаблицыТаблицаПеремещений.СтрокиДокумента = ВернутьТаблицуСтрокиВозвратов();
		// Перемещаем указатель.
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	СтрокаЗапроса = "SELECT lines.* FROM spring.doc_movement_table AS lines INNER JOIN spring.doc_movement_head AS head ON lines.id_doc=head.id_doc WHERE head.date_doc BETWEEN "+ СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND head.id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + " AND head.status != 0";
		
		
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыПеремещений = ТаблицаПеремещений.Найти(РезЗапроса.Fields("id_doc").Value,"id_doc");
		
		Если СтрокаТаблицыПеремещений = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска документа по номеру: "+РезЗапроса.Fields("id_doc").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиДокумента = СтрокаТаблицыПеремещений.СтрокиДокумента;
		СтрокаСтрокиДокумента = СтрокиДокумента.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиДокумента.Колонки Цикл 
			СтрокаСтрокиДокумента[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		СтрокаТаблицыПеремещений.СтрокиДокумента = СтрокиДокумента;
		РезЗапроса.MoveNext();    
	КонецЦикла;

	Для Каждого СтрокаТаблицыПеремещений Из ТаблицаПеремещений Цикл
		ОбработкаПрерыванияПользователя();
		Состояние("Обработка перемещений товаров");
		Строка = Результат.Найти(СтрокаТаблицыПеремещений.id_outlet,"НомерТорговойТочки");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерТорговойТочки = СтрокаТаблицыПеремещений.id_outlet;
			Строка.ДанныеПеремещений = ВернутьТаблицуПеремещений();
		КонецЕсли;
		
		ТаблицаПеремещенийРезультат = Строка.ДанныеПеремещений;
		СтрокаТаблицыПеремещенийРезультат = ТаблицаПеремещенийРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаПеремещений.Колонки Цикл 
			СтрокаТаблицыПеремещенийРезультат[Колонка.Имя] = СтрокаТаблицыПеремещений[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеПеремещений = ТаблицаПеремещенийРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 

	

КонецФункции // Загрузить_ТаблицуПеремещений()

&НаСервере
Функция ЗагрузитьТаблицуВозвратов(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерТорговойТочки");
	РезультатКолонки.Добавить("ДанныеВозвратов");
	
	ТаблицаВозвратов = ВернутьТаблицуВозвратов();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'"; 
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'"; 
	
	СтрокаЗапроса = "SELECT * FROM spring.doc_refund_head WHERE date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	СтрокаЗапроса = СтрокаЗапроса + " AND status != 0";
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыТаблицаВозвратов = ТаблицаВозвратов.Добавить();
		Для Каждого Колонка ИЗ ТаблицаВозвратов.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			СтрокаТаблицыТаблицаВозвратов[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		СтрокаТаблицыТаблицаВозвратов.СтрокиДокумента = ВернутьТаблицуСтрокиВозвратов();
		// Перемещаем указатель.
		РезЗапроса.MoveNext();    
	КонецЦикла;

	СтрокаЗапроса = "SELECT lines.* FROM spring.doc_refund_table AS lines INNER JOIN spring.doc_refund_head AS head ON lines.id_doc=head.id_doc WHERE head.date_doc BETWEEN "+ СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND head.id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + " AND head.status != 0";
		
		
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыВозвратов = ТаблицаВозвратов.Найти(РезЗапроса.Fields("id_doc").Value,"id_doc");
		
		Если СтрокаТаблицыВозвратов = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска документа по номеру: "+РезЗапроса.Fields("id_doc").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиДокумента = СтрокаТаблицыВозвратов.СтрокиДокумента;
		СтрокаСтрокиДокумента = СтрокиДокумента.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиДокумента.Колонки Цикл 
			СтрокаСтрокиДокумента[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		СтрокаТаблицыВозвратов.СтрокиДокумента = СтрокиДокумента;
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыВозвратов Из ТаблицаВозвратов Цикл
		ОбработкаПрерыванияПользователя();
		Состояние("Обработка возвратов товаров поставщику");
		Строка = Результат.Найти(СтрокаТаблицыВозвратов.id_outlet,"НомерТорговойТочки");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерТорговойТочки = СтрокаТаблицыВозвратов.id_outlet;
			Строка.ДанныеВозвратов = ВернутьТаблицуВозвратов();
		КонецЕсли;
		
		ТаблицаВозвратовРезультат = Строка.ДанныеВозвратов;
		СтрокаТаблицыВозвратовРезультат = ТаблицаВозвратовРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаВозвратов.Колонки Цикл 
			СтрокаТаблицыВозвратовРезультат[Колонка.Имя] = СтрокаТаблицыВозвратов[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеВозвратов = ТаблицаВозвратовРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 

	

КонецФункции // ()

&НаСервере
Функция ЗагрузитьТаблицуКассовых(PostgreSQLObject, Отказ)
	
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерТорговойТочки");
	РезультатКолонки.Добавить("ДанныеКассовых");
	
	ТаблицаКассовых = ВернутьТаблицуКассовых();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'"; 
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'"; 
	
	СтрокаЗапроса = "SELECT * FROM spring.doc_cash WHERE date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.ККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND id_workplace="+Формат(Число(Объект.ККМ.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	СтрокаЗапроса = СтрокаЗапроса + " AND status != 0";
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыТаблицаКассовых = ТаблицаКассовых.Добавить();
		Для Каждого Колонка ИЗ ТаблицаКассовых.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			СтрокаТаблицыТаблицаКассовых[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		// Перемещаем указатель.
		РезЗапроса.MoveNext();    
	КонецЦикла;

	Для Каждого СтрокаТаблицыКассовых Из ТаблицаКассовых Цикл
		ОбработкаПрерыванияПользователя();
		Состояние("Обработка кассовых документов");
		Строка = Результат.Найти(СтрокаТаблицыКассовых.id_outlet,"НомерТорговойТочки");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерТорговойТочки = СтрокаТаблицыКассовых.id_outlet;
			Строка.ДанныеКассовых = ВернутьТаблицуКассовых();
		КонецЕсли;
		
		ТаблицаКассовыхРезультат = Строка.ДанныеКассовых;
		СтрокаТаблицыКассовыхРезультат = ТаблицаКассовыхРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаКассовых.Колонки Цикл 
			СтрокаТаблицыКассовыхРезультат[Колонка.Имя] = СтрокаТаблицыКассовых[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеКассовых = ТаблицаКассовыхРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 


	

КонецФункции // ()

&НаСервере
Процедура ЗагрузитьПереоценку(PostgreSQLObject, Отказ)
	ТаблицаПереоценки = Загрузить_ТаблицуПереоценки(PostgreSQLObject, Отказ);

	Объект.ТаблицаДокументов.Очистить();
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Очистить();
	
	КолонкиТаблицыДокументов = Объект.ТаблицаДокументов.Колонки;
	КолонкиТаблицыДокументов.Добавить("Склад");
	КолонкиТаблицыДокументов.Добавить("Документ");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеДокумента");
	КолонкиТаблицыДокументов.Добавить("Пометка");
	КолонкиТаблицыДокументов.Добавить("ПредставлениеСтрокиХамелеона");
	КолонкиТаблицыДокументов.Добавить("ДанныеПереоценки");
	
	Для каждого СтрокаТаблицыПереоценки Из ТаблицаПереоценки Цикл
		Запрос = Новый Запрос(); 
		Запрос.Текст = "ВЫБРАТЬ
		|	ПереоценкаТоваровВРознице.Ссылка
		|ИЗ
		|	Документ.ПереоценкаТоваровВРознице КАК ПереоценкаТоваровВРознице
		|ГДЕ
		|	ПереоценкаТоваровВРознице.chm_GuidХамелеон = &GuidХамелеон"; 
		Запрос.УстановитьПараметр("GuidХамелеон", СтрокаТаблицыПереоценки.guid ); 
		Рез = Запрос.Выполнить(); 
		Если Рез.Пустой() Тогда
			ПредставлениеДокумента = "<Новый>";
			Документ = Неопределено;
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ПредставлениеДокумента = Строка(Выборка.Ссылка);
			Документ= Выборка.Ссылка;
		КонецЕсли;
		
		Склад = ПолучитьЭлементСправочника(СтрокаТаблицыПереоценки.id_outlet,"Склады");
		СтрокаПереоценки = Объект.ТаблицаДокументов.Добавить();
		СтрокаПереоценки.ДанныеПереоценки = СтрокаТаблицыПереоценки;
		СтрокаПереоценки.Склад = Склад;
		СтрокаПереоценки.ПредставлениеДокумента = ПредставлениеДокумента;
		СтрокаПереоценки.Документ = Документ;
		Если СтрокаПереоценки.Документ <> Неопределено Тогда
			СтрокаПереоценки.Пометка = НЕ СтрокаПереоценки.Документ.Проведен;
		Иначе
			СтрокаПереоценки.Пометка = Истина;
		КонецЕсли;
		СтрокаПереоценки.ПредставлениеСтрокиХамелеона = ""+СтрокаПереоценки.Склад;
	КонецЦикла;
	ФормаПодтверждения = ПолучитьФорму("ФормаПодтвержденияЗагрузка");
	
	ТабличноеПоле = ФормаПодтверждения.ЭлементыФормы.ТаблицаДокументовДляПодтверждения;
	ТабличноеПоле.Колонки.Добавить("ПредставлениеДокумента","Документ в базе");
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Если Колонка.Имя = "Загружать" Тогда
			Колонка.Данные = "ПредставлениеСтрокиХамелеона";
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "ПредставлениеДокумента" Тогда
			Колонка.Данные = "ПредставлениеДокумента";
		КонецЕсли; 
		Колонка.Видимость = Истина;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла; 
	ПараметрЗакрытия = ФормаПодтверждения.ОткрытьМодально();
	Если НЕ ПараметрЗакрытия = "Выполнить" Тогда
		Сообщить("Обработка отменена",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Для Каждого ДокументПереоценка Из Объект.ТаблицаДокументов Цикл
		// Пропустим неотмеченные документы
		Если НЕ ДокументПереоценка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если ДокументПереоценка.Документ = Неопределено Тогда
			Док = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
		Иначе
			Док = ДокументПереоценка.Документ.ПолучитьОбъект();
		КонецЕсли;
		Док.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
		Док.Организация = Справочники.Организации.НайтиПоКоду("000000002");
		Док.chm_GuidХамелеон = ДокументПереоценка.ДанныеПереоценки.guid;
		Док.Склад = ДокументПереоценка.Склад;
		Док.Дата = ПреобразоватьВДату(ДокументПереоценка.ДанныеПереоценки.date_doc);
		Док.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		НомерДокумента = ДокументПереоценка.ДанныеПереоценки.number;
		НомерУстановкиЦенНоменклатуры = Формат(Число(Прав(НомерДокумента,СтрДлина(НомерДокумента) - Найти(НомерДокумента, ":") - 1 )), "ЧЦ=11; ЧВН=; ЧГ=0");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК Док
		|ГДЕ
		|	Док.Номер = &номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Дата УБЫВ");
		Запрос.УстановитьПараметр("номер",НомерУстановкиЦенНоменклатуры);
		Рез = Запрос.Выполнить();
		Если не рез.Пустой() Тогда
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			Док.ДокументУстановкиЦен = Выборка.Ссылка;
		КонецЕсли;
		Док.Товары.Очистить();
		Для каждого Строка Из ДокументПереоценка.ДанныеПереоценки.СтрокиДокумента Цикл
			Стр = Док.Товары.Добавить();
			Стр.Номенклатура = ПолучитьЭлементСправочника(Строка.id_goods,"Номенклатура");
			Стр.ЦенаВРознице =   Строка.price_new / 100;
		КонецЦикла;
		Попытка 
			Если Объект.ПроводитьДокументы Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимПроведения = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если Док.Проведен Тогда
				РежимПроведения = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Док.Записать(РежимПроведения);
			Сообщить("Записан документ "+Док);
		Исключение 
			Сообщить(ОписаниеОшибки()); 
			Попытка 
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
		
	КонецЦикла;

	

КонецПроцедуры // ()

&НаСервере
Функция ВернутьТаблицуПереоценки()Экспорт
	ТаблицаПереоценки = Новый ТаблицаЗначений;
	ТаблицаПереоценкиКолонки = ТаблицаПереоценки.Колонки;
	ТаблицаПереоценкиКолонки.Добавить("id_doc");
	ТаблицаПереоценкиКолонки.Добавить("date_doc");
	ТаблицаПереоценкиКолонки.Добавить("number");
	ТаблицаПереоценкиКолонки.Добавить("id_outlet");
	ТаблицаПереоценкиКолонки.Добавить("id_workplace");
	ТаблицаПереоценкиКолонки.Добавить("id_operator");
	ТаблицаПереоценкиКолонки.Добавить("id_price_level");
	ТаблицаПереоценкиКолонки.Добавить("date_auto");
	ТаблицаПереоценкиКолонки.Добавить("date_permitted");
	ТаблицаПереоценкиКолонки.Добавить("status");
	ТаблицаПереоценкиКолонки.Добавить("guid");
	ТаблицаПереоценкиКолонки.Добавить("СтрокиДокумента");
	Возврат ТаблицаПереоценки
КонецФункции

&НаСервере
Функция ВернутьТаблицуСтрокиПереоценки()
	СтрокиПереоценки = Новый ТаблицаЗначений;
	СтрокиПереоценкиКолонки = СтрокиПереоценки.Колонки;
	СтрокиПереоценкиКолонки.Добавить("id_doc");
	СтрокиПереоценкиКолонки.Добавить("date_doc");
	СтрокиПереоценкиКолонки.Добавить("number");
	СтрокиПереоценкиКолонки.Добавить("id_goods");
	СтрокиПереоценкиКолонки.Добавить("id_unit");
	СтрокиПереоценкиКолонки.Добавить("id_series");
	СтрокиПереоценкиКолонки.Добавить("price_new");
	СтрокиПереоценкиКолонки.Добавить("min_price_new");
	СтрокиПереоценкиКолонки.Добавить("max_price_new");
	СтрокиПереоценкиКолонки.Добавить("wholesale_count_new");
	СтрокиПереоценкиКолонки.Добавить("wholesale_price_new");
	СтрокиПереоценкиКолонки.Добавить("row_id");
	Возврат СтрокиПереоценки;
КонецФункции

&НаСервере
Функция Загрузить_ТаблицуПереоценки(PostgreSQLObject, Отказ)

	
	ТаблицаПереоценок = ВернутьТаблицуПереоценки();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'"; 
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'"; 
	
	СтрокаЗапроса = "SELECT * FROM spring.doc_reprice_head WHERE date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	СтрокаЗапроса = СтрокаЗапроса + " AND status != 0";
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыТаблицаПереоценок = ТаблицаПереоценок.Добавить();
		Для Каждого Колонка ИЗ ТаблицаПереоценок.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			СтрокаТаблицыТаблицаПереоценок[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		СтрокаТаблицыТаблицаПереоценок.СтрокиДокумента = ВернутьТаблицуСтрокиПереоценки();
		// Перемещаем указатель.
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	СтрокаЗапроса = "SELECT lines.* FROM spring.doc_reprice_table AS lines INNER JOIN spring.doc_reprice_head AS head ON lines.id_doc=head.id_doc WHERE head.date_doc BETWEEN "+ СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	СтрокаЗапроса = СтрокаЗапроса + " AND head.status != 0";
	
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыПереоценки = ТаблицаПереоценок.Найти(РезЗапроса.Fields("id_doc").Value,"id_doc");
		
		Если СтрокаТаблицыПереоценки = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска документа по номеру: "+РезЗапроса.Fields("id_doc").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиДокумента = СтрокаТаблицыПереоценки.СтрокиДокумента;
		СтрокаСтрокиДокумента = СтрокиДокумента.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиДокумента.Колонки Цикл 
			СтрокаСтрокиДокумента[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		СтрокаТаблицыПереоценки.СтрокиДокумента = СтрокиДокумента;
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	Возврат ТаблицаПереоценок; 

	

КонецФункции // ()

&НаСервере
Функция ВернутьТаблицуКассовых() Экспорт
	ТаблицаКасс = Новый ТаблицаЗначений;
	ТаблицаКассКолонки = ТаблицаКасс.Колонки;
	ТаблицаКассКолонки.Добавить("id_doc");
	ТаблицаКассКолонки.Добавить("date_doc");
	ТаблицаКассКолонки.Добавить("number_doc");
	ТаблицаКассКолонки.Добавить("id_outlet");
	ТаблицаКассКолонки.Добавить("id_workplace");
	ТаблицаКассКолонки.Добавить("type_doc");
	ТаблицаКассКолонки.Добавить("id_cash_flow");
	ТаблицаКассКолонки.Добавить("id_employee");
	ТаблицаКассКолонки.Добавить("summ");
	ТаблицаКассКолонки.Добавить("status");

	Возврат ТаблицаКасс;
КонецФункции

&НаСервере
Функция ВернутьТаблицуВозвратов() Экспорт
	ТаблицаВозвратов = Новый ТаблицаЗначений;
	ТаблицаВозвратовКолонки = ТаблицаВозвратов.Колонки;
	ТаблицаВозвратовКолонки.Добавить("id_doc");
	ТаблицаВозвратовКолонки.Добавить("date_doc");
	ТаблицаВозвратовКолонки.Добавить("number_doc");
	ТаблицаВозвратовКолонки.Добавить("id_outlet");
	ТаблицаВозвратовКолонки.Добавить("id_workplace");
	ТаблицаВозвратовКолонки.Добавить("id_client");
	ТаблицаВозвратовКолонки.Добавить("id_employee");
	ТаблицаВозвратовКолонки.Добавить("СтрокиДокумента");

	Возврат ТаблицаВозвратов;
КонецФункции

&НаСервере
Функция ВернутьТаблицуСтрокиВозвратов()
	СтрокиВозвратов = Новый ТаблицаЗначений;
	СтрокиВозвратовКолонки = СтрокиВозвратов.Колонки;
	СтрокиВозвратовКолонки.Добавить("id_doc");
	СтрокиВозвратовКолонки.Добавить("id_goods");
	СтрокиВозвратовКолонки.Добавить("id_unit");
	СтрокиВозвратовКолонки.Добавить("id_series");
	СтрокиВозвратовКолонки.Добавить("quantity");
	СтрокиВозвратовКолонки.Добавить("price");

	Возврат СтрокиВозвратов;
КонецФункции

&НаСервере
Функция ВернутьТаблицуПеремещений()Экспорт
	ТаблицаПеремещений = Новый ТаблицаЗначений;
	ТаблицаПеремещенийКолонки = ТаблицаПеремещений.Колонки;
	ТаблицаПеремещенийКолонки.Добавить("id_doc");
	ТаблицаПеремещенийКолонки.Добавить("date_doc");
	ТаблицаПеремещенийКолонки.Добавить("number_doc");
	ТаблицаПеремещенийКолонки.Добавить("id_outlet");
	ТаблицаПеремещенийКолонки.Добавить("id_workplace");
	ТаблицаПеремещенийКолонки.Добавить("type_doc");
	ТаблицаПеремещенийКолонки.Добавить("id_employee_client");
	ТаблицаПеремещенийКолонки.Добавить("id_employee");
	ТаблицаПеремещенийКолонки.Добавить("status");
	ТаблицаПеремещенийКолонки.Добавить("СтрокиДокумента");

	Возврат ТаблицаПеремещений;
КонецФункции

&НаСервере
Функция ВернутьТаблицуРозничныхПродаж()Экспорт
	ТаблицаРозничныхПродаж = Новый ТаблицаЗначений;
	ТаблицаРозничныхПродажКолонки = ТаблицаРозничныхПродаж.Колонки;
	ТаблицаРозничныхПродажКолонки.Добавить("ИндексПоиска");
	ТаблицаРозничныхПродажКолонки.Добавить("ДатаДокумента");
	ТаблицаРозничныхПродажКолонки.Добавить("ККМ");
	ТаблицаРозничныхПродажКолонки.Добавить("ТаблицаСтрокЧекаНаличные");
	ТаблицаРозничныхПродажКолонки.Добавить("ТаблицаСтрокЧекаБезнал");
	ТаблицаРозничныхПродажКолонки.Добавить("ТаблицаДисконтныхПокупок");
	ТаблицаРозничныхПродажКолонки.Добавить("Документ");
	ТаблицаРозничныхПродажКолонки.Добавить("ПредставлениеДокумента");
	ТаблицаРозничныхПродажКолонки.Добавить("Пометка");
	ТаблицаРозничныхПродажКолонки.Добавить("ПредставлениеСтрокиХамелеона");
	ТаблицаРозничныхПродажКолонки.Добавить("ДоСканирования");
	ТаблицаРозничныхПродажКолонки.Добавить("ТипОплаты");
	ТаблицаРозничныхПродажКолонки.Добавить("ПризнакОтраженияВУчете");
	
	Возврат ТаблицаРозничныхПродаж;
КонецФункции

&НаСервере
Функция ВернутьТаблицуИнвентаризаций()Экспорт
	ТаблицаИнвентаризаций = Новый ТаблицаЗначений;
	ТаблицаИнвентаризацийКолонки = ТаблицаИнвентаризаций.Колонки;
	ТаблицаИнвентаризацийКолонки.Добавить("id_doc");
	ТаблицаИнвентаризацийКолонки.Добавить("date_doc");
	ТаблицаИнвентаризацийКолонки.Добавить("number_doc");
	ТаблицаИнвентаризацийКолонки.Добавить("id_outlet");
	ТаблицаИнвентаризацийКолонки.Добавить("id_workplace");
	ТаблицаИнвентаризацийКолонки.Добавить("id_employee");
	ТаблицаИнвентаризацийКолонки.Добавить("transfer");
	ТаблицаИнвентаризацийКолонки.Добавить("date_save");
	ТаблицаИнвентаризацийКолонки.Добавить("status");
	ТаблицаИнвентаризацийКолонки.Добавить("СтрокиДокумента");

	Возврат ТаблицаИнвентаризаций;
КонецФункции

&НаСервере
Функция ВернутьТаблицуСтрокиИнвентаризаций()
	СтрокиИнвентаризаций = Новый ТаблицаЗначений;
	СтрокиИнвентаризацийКолонки = СтрокиИнвентаризаций.Колонки;
	СтрокиИнвентаризацийКолонки.Добавить("id_doc");
	СтрокиИнвентаризацийКолонки.Добавить("number_doc");
	СтрокиИнвентаризацийКолонки.Добавить("consecutive");
	СтрокиИнвентаризацийКолонки.Добавить("id_goods");
	СтрокиИнвентаризацийКолонки.Добавить("id_unit");
	СтрокиИнвентаризацийКолонки.Добавить("id_series");
	СтрокиИнвентаризацийКолонки.Добавить("quantity");
	СтрокиИнвентаризацийКолонки.Добавить("price");
	СтрокиИнвентаризацийКолонки.Добавить("quantity_actual");
	СтрокиИнвентаризацийКолонки.Добавить("been_edited");
	СтрокиИнвентаризацийКолонки.Добавить("number_edits");
	СтрокиИнвентаризацийКолонки.Добавить("motion_rest");
	
	Возврат СтрокиИнвентаризаций;
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицуИнвентаризаций(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерТорговойТочки");
	РезультатКолонки.Добавить("ДанныеИнвентаризаций");
	
	ТаблицаИнвентаризаций = ВернутьТаблицуИнвентаризаций();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'";
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'";

	СтрокаЗапроса = "SELECT * FROM spring.doc_inventory_head WHERE date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	СтрокаЗапроса = СтрокаЗапроса + " AND status != 0";
	
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыТаблицаИнвентаризаций = ТаблицаИнвентаризаций.Добавить();
		Для Каждого Колонка ИЗ ТаблицаИнвентаризаций.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			СтрокаТаблицыТаблицаИнвентаризаций[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		СтрокаТаблицыТаблицаИнвентаризаций.СтрокиДокумента = ВернутьТаблицуСтрокиИнвентаризаций();
		// Перемещаем указатель.
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	СтрокаЗапроса = "SELECT lines.* FROM spring.doc_inventory_table AS lines INNER JOIN spring.doc_inventory_head AS head ON lines.id_doc=head.id_doc WHERE head.date_doc BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.Склад = Справочники.Склады.ПустаяСсылка() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND head.id_outlet="+Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + " AND head.status != 0";
		
		
	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыИнвентаризаций = ТаблицаИнвентаризаций.Найти(РезЗапроса.Fields("id_doc").Value,"id_doc");
		
		Если СтрокаТаблицыИнвентаризаций = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска документа по номеру: "+РезЗапроса.Fields("id_doc").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиДокумента = СтрокаТаблицыИнвентаризаций.СтрокиДокумента;
		СтрокаСтрокиДокумента = СтрокиДокумента.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиДокумента.Колонки Цикл 
			СтрокаСтрокиДокумента[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		СтрокаТаблицыИнвентаризаций.СтрокиДокумента = СтрокиДокумента;
		РезЗапроса.MoveNext();    
	КонецЦикла;

	Для Каждого СтрокаТаблицыИнвентаризаций Из ТаблицаИнвентаризаций Цикл
		ОбработкаПрерыванияПользователя();
		Состояние("Обработка инвентаризаций");
		Строка = Результат.Найти(СтрокаТаблицыИнвентаризаций.id_outlet,"НомерТорговойТочки");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерТорговойТочки = СтрокаТаблицыИнвентаризаций.id_outlet;
			Строка.ДанныеИнвентаризаций = ВернутьТаблицуИнвентаризаций();
		КонецЕсли;
		
		ТаблицаИнвентаризацийРезультат = Строка.ДанныеИнвентаризаций;
		СтрокаТаблицыИнвентаризацийРезультат = ТаблицаИнвентаризацийРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаИнвентаризаций.Колонки Цикл 
			СтрокаТаблицыИнвентаризацийРезультат[Колонка.Имя] = СтрокаТаблицыИнвентаризаций[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеИнвентаризаций = ТаблицаИнвентаризацийРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 

	

КонецФункции // Загрузить_ТаблицуПеремещений()

&НаСервере
Функция ЗагрузитьТаблицуПоступлений(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерТорговойТочки");
	РезультатКолонки.Добавить("ДанныеПоступлений");
	
	ТаблицаПоступлений = ВернутьТаблицуПоступлений();
	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'";
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'";
	
	СтрокаСклада = "";
	Если НЕ Объект.Склад.Пустая() Тогда
		СтрокаСклада = " AND id_outlet = " + Формат(Число(Объект.Склад.Код), "ЧГ=0; ЧН=0");
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("SELECT * FROM spring.doc_invoice_head WHERE date_doc BETWEEN %1 AND %2 AND status != 0 %3", 
		СтрокаДатаЗагрузкиНачало, СтрокаДатаЗагрузкиКонец, СтрокаСклада);
	
	Сообщить(СтрокаЗапроса);
	
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезультатЗапроса.EOF() = 0  Цикл
		СтрокаТаблицыПоступлений = ТаблицаПоступлений.Добавить();
		Для Каждого Колонка ИЗ ТаблицаПоступлений.Колонки Цикл 
			Если Колонка.Имя = "СтрокиДокумента" Тогда
				продолжить;
			КонецЕсли;
			                   
			СтрокаТаблицыПоступлений[Колонка.Имя] = РезультатЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла;         
		СтрокаТаблицыПоступлений.СтрокиДокумента = ВернутьТаблицуСтрокиПоступлений();
		
		РезультатЗапроса.MoveNext();    
	КонецЦикла;

	Если НЕ Объект.Склад.Пустая() Тогда
		СтрокаСклада = " AND head.id_outlet = " + Формат(Число(Объект.Склад.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("SELECT lines.* FROM spring.doc_invoice_table AS lines INNER JOIN spring.doc_invoice_head AS head ON lines.id_doc=head.id_doc WHERE head.date_doc BETWEEN %1 AND %2 AND head.status != 0 %3",
		СтрокаДатаЗагрузкиНачало, СтрокаДатаЗагрузкиКонец, СтрокаСклада);

	Сообщить(СтрокаЗапроса);
		
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезультатЗапроса.EOF()=0  Цикл
		СтрокаТаблицыПоступлений = ТаблицаПоступлений.Найти(РезультатЗапроса.Fields("id_doc").Value,"id_doc");
		Если СтрокаТаблицыПоступлений = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска документа по номеру: " + РезультатЗапроса.Fields("id_doc").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиДокумента = СтрокаТаблицыПоступлений.СтрокиДокумента;
		СтрокаСтрокиДокумента = СтрокиДокумента.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиДокумента.Колонки Цикл 
			СтрокаСтрокиДокумента[Колонка.Имя] = РезультатЗапроса.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		СтрокаТаблицыПоступлений.СтрокиДокумента = СтрокиДокумента;
		РезультатЗапроса.MoveNext();    
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыПоступлений Из ТаблицаПоступлений Цикл
		ОбработкаПрерыванияПользователя();
		Состояние("Обработка поступлений товаров и услуг");
		Строка = Результат.Найти(СтрокаТаблицыПоступлений.id_outlet,"НомерТорговойТочки");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерТорговойТочки = СтрокаТаблицыПоступлений.id_outlet;
			Строка.ДанныеПоступлений = ВернутьТаблицуПоступлений();
		КонецЕсли;
		
		ТаблицаПоступленийРезультат = Строка.ДанныеПоступлений;
		СтрокаТаблицыПоступленийРезультат = ТаблицаПоступленийРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаПоступлений.Колонки Цикл 
			СтрокаТаблицыПоступленийРезультат[Колонка.Имя] = СтрокаТаблицыПоступлений[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеПоступлений = ТаблицаПоступленийРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ВернутьТаблицуПоступленийТоваровУслуг() Экспорт 
	ТаблицаПоступленийТоваровУслуг = ВернутьТаблицуПоступлений();
	ТаблицаПоступленийТоваровУслугКолонки = ТаблицаПоступленийТоваровУслуг.Колонки;
	ТаблицаПоступленийТоваровУслугКолонки.Добавить("Склад");
	ТаблицаПоступленийТоваровУслугКолонки.Добавить("Документ");
	ТаблицаПоступленийТоваровУслугКолонки.Добавить("ПредставлениеДокумента");
	ТаблицаПоступленийТоваровУслугКолонки.Добавить("Пометка");
	ТаблицаПоступленийТоваровУслугКолонки.Добавить("ПредставлениеСтрокиХамелеона");
	Возврат ТаблицаПоступленийТоваровУслуг;
КонецФункции

&НаСервере
Функция ВернутьТаблицуСтрокиПоступлений() Экспорт
	СтрокиПоступлений = Новый ТаблицаЗначений;
	СтрокиПоступленийКолонки = СтрокиПоступлений.Колонки;
	СтрокиПоступленийКолонки.Добавить("id_doc");
	СтрокиПоступленийКолонки.Добавить("date_doc");
	СтрокиПоступленийКолонки.Добавить("number_doc");
	СтрокиПоступленийКолонки.Добавить("consecutive");
	СтрокиПоступленийКолонки.Добавить("id_goods");
	СтрокиПоступленийКолонки.Добавить("id_unit");
	СтрокиПоступленийКолонки.Добавить("id_series");
	СтрокиПоступленийКолонки.Добавить("quantity");
	СтрокиПоступленийКолонки.Добавить("price");
	Возврат СтрокиПоступлений;
КонецФункции

&НаСервере
Функция ВернутьТаблицуПоступлений() Экспорт
	ТаблицаПоступлений = Новый ТаблицаЗначений;
	ТаблицаПоступленийКолонки = ТаблицаПоступлений.Колонки;
	ТаблицаПоступленийКолонки.Добавить("id_doc");
	ТаблицаПоступленийКолонки.Добавить("date_doc");
	ТаблицаПоступленийКолонки.Добавить("number_doc");
	ТаблицаПоступленийКолонки.Добавить("id_outlet");
	ТаблицаПоступленийКолонки.Добавить("id_workplace");
	ТаблицаПоступленийКолонки.Добавить("id_client");
	ТаблицаПоступленийКолонки.Добавить("id_employee");
	ТаблицаПоступленийКолонки.Добавить("СтрокиДокумента");
	Возврат ТаблицаПоступлений;
КонецФункции

&НаСервере
Функция ПолучитьВидНоменклатуры(КодВидаНоменклатуры)
	Если КодВидаНоменклатуры = 0 Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001"); // Нет отдельной таблицы с видами товаров, обычные товары = 0	
		Если ВидНоменклатуры.Пустая() Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
			ВидНоменклатуры.Наименование = "Обычный";
			ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;			
			Попытка
            	ВидНоменклатуры.Записать();
			Исключение
            	Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("ПолучитьВидНоменклатуры(): Нет соответствия типа товара");
	КонецЕсли;
	
	Возврат ВидНоменклатуры;

КонецФункции

&НаСервере
Функция ПолучитьЕдиницуИзмерения(Номенклатура, НазваниеЕдиницы)
	
	//СпрЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоКоду(001,,,Выборка.Ссылка);
	ДополнительнаяЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(НазваниеЕдиницы,,,Номенклатура.Ссылка);
	Если ДополнительнаяЕдиницаИзмерения.Пустая() Тогда
		ДополнительнаяЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
        //СпрЕдИзм.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(001);
		//ДополнительнаяЕдиницаИзмерения.Код = 1; // Временное решение, наверное
		ДополнительнаяЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НазваниеЕдиницы);
        ДополнительнаяЕдиницаИзмерения.Владелец = Номенклатура.Ссылка;
        ДополнительнаяЕдиницаИзмерения.Наименование = НазваниеЕдиницы;
        ДополнительнаяЕдиницаИзмерения.Коэффициент = 1;
        Попытка
            ДополнительнаяЕдиницаИзмерения.Записать();
        Исключение
            Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДополнительнаяЕдиницаИзмерения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуИзСтроки(Стр) 

         Д = Дата("00010101000000");

         Если ПустаяСтрока(Стр) Тогда
             Возврат Д;
         КонецЕсли;

         Если Найти(Стр,".") > 0 Тогда

             Если Найти(Стр,":") > 0 И Найти(Стр," ") > 0 Тогда 
                 М = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр," ");
                 Возврат ПолучитьДатуИзСтроки(М[0]);
             КонецЕсли;

             М = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр,".");

         ИначеЕсли Найти(Стр,"/")>0 Тогда

             М = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр,"/");

         ИначеЕсли Найти(Стр,",")>0 Тогда

             М = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр,",");

         ИначеЕсли Найти(Стр,"-")>0 Тогда

             М = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр,"-");

         КонецЕсли; 

         Попытка

             Если М.Количество() = 3 Тогда //"01.02.13" или "01.02.2013"
                 Год = ?(СтрДлина(М[2]) = 2,2000 + М[2],М[2]);
                 Д = Дата(Год,М[1],М[0]);
             ИначеЕсли М.Количество() = 2 Тогда //"02.13" или "02.2013";
                 Год = ?(СтрДлина(М[1]) = 2,2000 + М[1],М[1]);
                 Д = Дата(Год,М[0],1);
             КонецЕсли;

         Исключение
         КонецПопытки; 

         Возврат Д; 

     КонецФункции
	 
&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьВДату(date)
	стрДата = СтрЗаменить(date,"-","");
	стрДата = СтрЗаменить(стрДата,"T",""); 
	
	Возврат Дата(стрДата);
КонецФункции
				 
&НаСервере 
Функция ВернутьТаблицуБезнальныхПокупок()
	ТаблицаБезнальныхПокупок = Новый ТаблицаЗначений;
	СтрокиБезнальныхПокупок = ТаблицаБезнальныхПокупок.Колонки;
	СтрокиБезнальныхПокупок.Добавить("id_check");
	СтрокиБезнальныхПокупок.Добавить("ВидОплаты");
	СтрокиБезнальныхПокупок.Добавить("Сумма");
	
	Возврат ТаблицаБезнальныхПокупок;
КонецФункции

&НаСервере
Функция ВернутьТаблицуДисконтныхПокупок()
	ТаблицаДисконтныхПокупок = Новый ТаблицаЗначений;
	СтрокиДискнтныхПокупок = ТаблицаДисконтныхПокупок.Колонки;
	СтрокиДискнтныхПокупок.Добавить("Карточка");
	СтрокиДискнтныхПокупок.Добавить("Сумма");
	
	Возврат ТаблицаДисконтныхПокупок;
КонецФункции	

&НаСервере
Функция ПолучитьСериюТовара(Товар,Search_key)
	Результат = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Если НЕ Товар.ВестиУчетПоСериям Тогда
		Возврат Результат;
	КонецЕсли;
	           
	Запрос = Новый Запрос(); 
	Запрос.Текст = "ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.СерияНоменклатуры
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.Штрихкод = &Штрихкод";
		
	Запрос.УстановитьПараметр("Владелец", Товар); 
	Запрос.УстановитьПараметр("Штрихкод", Search_key); 
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	Если ТЗ.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ТЗ[0].СерияНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьХарактеристикуТовара(Товар,Search_key)
	Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если НЕ Товар.ВестиУчетПоХарактеристикам Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(); 
	Запрос.Текст = "ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.Штрихкод = &Штрихкод";
		
	Запрос.УстановитьПараметр("Владелец", Товар); 
	Запрос.УстановитьПараметр("Штрихкод", Search_key); 
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	Если ТЗ.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ТЗ[0].ХарактеристикаНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицуПереоценок (PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	//РезультатКолонки.Добавить("НомерРабочегоМеста");
	//РезультатКолонки.Добавить("ВремяСканированияТекст");
	РезультатКолонки.Добавить("id_outlet");
	РезультатКолонки.Добавить("date_doc");

	
	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'";
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'";
	
	СтрокаЗапроса = "SELECT doc_reprice_head.id_outlet,MAX(doc_reprice_head.date_doc) AS date_doc FROM spring.doc_reprice_head WHERE date_doc BETWEEN "+СтрокаДатаЗагрузкиНачало+" AND "+СтрокаДатаЗагрузкиКонец;
	СтрокаЗапроса = СтрокаЗапроса + " GROUP BY doc_reprice_head.id_outlet";
	Сообщить(СтрокаЗапроса);

	РезЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезЗапроса.EOF()=0  Цикл
		СтрокаТаблицыЛогов = Результат.Добавить();
		Для Каждого Колонка ИЗ Результат.Колонки Цикл 
			Сообщить(Колонка.Имя);
			СтрокаТаблицыЛогов[Колонка.Имя] = РезЗапроса.Fields(Колонка.Имя).Value; 
		КонецЦикла; 
		РезЗапроса.MoveNext();    
	КонецЦикла;
	
	Возврат Результат; 
КонецФункции // ()

&НаСервере
Функция ЗагрузитьТаблицуЧеков(PostgreSQLObject, Отказ)
	Результат = Новый ТаблицаЗначений;
	РезультатКолонки = Результат.Колонки;
	РезультатКолонки.Добавить("НомерРабочегоМеста");
	РезультатКолонки.Добавить("ДанныеЧеков");
	
	ТаблицаЧеков = ВернутьТаблицуЧеков();

	СтрокаДатаЗагрузкиНачало = "'"+Формат(Объект.НачалоПериода,"ДФ=yyyy-MM-dd")+" 00:00:00"+"'"; 
	СтрокаДатаЗагрузкиКонец = "'"+Формат(Объект.КонецПериода,"ДФ=yyyy-MM-dd")+" 23:59:59"+"'"; 
	
	СтрокаЗапроса = "SELECT * FROM sales.checks WHERE time_check BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.ККМ.Пустая() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND id_workplace="+Формат(Число(Объект.ККМ.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	
	Сообщить(СтрокаЗапроса);
	
	Пока РезультатЗапроса.EOF() = 0  Цикл
		СтрокаТаблицыЧеков = ТаблицаЧеков.Добавить();
		Для Каждого Колонка ИЗ ТаблицаЧеков.Колонки Цикл 
			Если Колонка.Имя = "СтрокиЧека" Тогда
				продолжить;
			КонецЕсли; 
			СтрокаТаблицыЧеков[Колонка.Имя] = РезультатЗапроса.Fields(Колонка.Имя).Value; 
		КонецЦикла; 
		СтрокаТаблицыЧеков.СтрокиЧека = ВернутьТаблицуСтрокиЧека();

		РезультатЗапроса.MoveNext();    
	КонецЦикла;
	СтрокаЗапроса = "SELECT lines.*, lines.attrs->'printer' as printer  FROM sales.check_lines AS lines INNER JOIN sales.checks AS checks ON lines.id_check=checks.id_check WHERE time_check BETWEEN " + СтрокаДатаЗагрузкиНачало + " AND " + СтрокаДатаЗагрузкиКонец;
	Если НЕ Объект.ККМ.Пустая() Тогда
		СтрокаЗапроса = СтрокаЗапроса + " AND checks.id_workplace="+Формат(Число(Объект.ККМ.Код),"ЧГ=0; ЧН=0");
	КонецЕсли;
	
	Сообщить(СтрокаЗапроса);
	
	РезультатЗапроса = PostgreSQLQuery(PostgreSQLObject, Отказ, СтрокаЗапроса);
	Пока РезультатЗапроса.EOF()=0  Цикл
		СтрокаТаблицыЧеков = ТаблицаЧеков.Найти(РезультатЗапроса.Fields("id_check").Value,"id_check");
		Если СтрокаТаблицыЧеков = Неопределено Тогда
			Отказ = Истина;
			Сообщить("Ошибка поиска чека по номеру: "+ РезультатЗапроса.Fields("id_check").Value);
			Прервать;
		КонецЕсли;
		
		СтрокиЧека = СтрокаТаблицыЧеков.СтрокиЧека;
		СтрокаСтрокиЧеков = СтрокиЧека.Добавить(); 
		
		Для Каждого Колонка ИЗ СтрокиЧека.Колонки Цикл 
			СтрокаСтрокиЧеков[Колонка.Имя] = РезультатЗапроса.Fields(Колонка.Имя).Value; 
		КонецЦикла;
		
		СтрокаТаблицыЧеков.СтрокиЧека = СтрокиЧека;
		РезультатЗапроса.MoveNext();    
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыЧеков Из ТаблицаЧеков Цикл
		ОбработкаПрерыванияПользователя();
		//Сообщить("Обработка чеков");
		Строка = Результат.Найти(СтрокаТаблицыЧеков.id_workplace,"НомерРабочегоМеста");
		Если Строка = Неопределено Тогда
			Строка = Результат.Добавить();
			Строка.НомерРабочегоМеста = СтрокаТаблицыЧеков.id_workplace;
			Строка.ДанныеЧеков = ВернутьТаблицуЧеков();
		КонецЕсли;
		
		ТаблицаЧековРезультат = Строка.ДанныеЧеков;
		СтрокаТаблицыЧековРезультат = ТаблицаЧековРезультат.Добавить();
		
		Для Каждого Колонка ИЗ ТаблицаЧеков.Колонки Цикл 
			СтрокаТаблицыЧековРезультат[Колонка.Имя] = СтрокаТаблицыЧеков[Колонка.Имя]; 
		КонецЦикла;
		
		Строка.ДанныеЧеков = ТаблицаЧековРезультат;
		
	КонецЦикла;
	
	Возврат Результат; 
КонецФункции // ()

&НаСервере
Функция ВернутьТаблицуСтрокиЧека()
	СтрокиЧеков = Новый ТаблицаЗначений;
	СтрокиЧековКолонки = СтрокиЧеков.Колонки;
	СтрокиЧековКолонки.Добавить("id_check_line");
	СтрокиЧековКолонки.Добавить("id_check");
	СтрокиЧековКолонки.Добавить("id_goods");
	СтрокиЧековКолонки.Добавить("id_unit");
	СтрокиЧековКолонки.Добавить("id_series");
	СтрокиЧековКолонки.Добавить("search_key");
	СтрокиЧековКолонки.Добавить("quantity");
	СтрокиЧековКолонки.Добавить("price");
	СтрокиЧековКолонки.Добавить("discount");
	СтрокиЧековКолонки.Добавить("summ");
	СтрокиЧековКолонки.Добавить("attrs");
	СтрокиЧековКолонки.Добавить("printer");
	Возврат СтрокиЧеков;
КонецФункции

&НаСервере
Функция ВернутьТаблицуСтрокиЧекаВнутр()
	СтрокиЧеков = Новый ТаблицаЗначений;
	СтрокиЧековКолонки = СтрокиЧеков.Колонки;
	СтрокиЧековКолонки.Добавить("Номенклатура");
	СтрокиЧековКолонки.Добавить("ЕдИзм");
	СтрокиЧековКолонки.Добавить("Серия");
	СтрокиЧековКолонки.Добавить("Характеристика");
	СтрокиЧековКолонки.Добавить("quantity");
	СтрокиЧековКолонки.Добавить("price");
	СтрокиЧековКолонки.Добавить("discount");
	СтрокиЧековКолонки.Добавить("summ");
	
	Возврат СтрокиЧеков;
КонецФункции

&НаСервере
Функция ВернутьТаблицуЧеков()
	ТаблицаЧеков = Новый ТаблицаЗначений;
	ТаблицаЧековКолонки = ТаблицаЧеков.Колонки;
	ТаблицаЧековКолонки.Добавить("id_check");
	ТаблицаЧековКолонки.Добавить("id_registrar");
	ТаблицаЧековКолонки.Добавить("id_workplace");
	ТаблицаЧековКолонки.Добавить("id_session");
	ТаблицаЧековКолонки.Добавить("id_scheck");
	ТаблицаЧековКолонки.Добавить("id_fcheck");
	ТаблицаЧековКолонки.Добавить("time_check");
	ТаблицаЧековКолонки.Добавить("id_employee");
	ТаблицаЧековКолонки.Добавить("sum_discount");
	ТаблицаЧековКолонки.Добавить("sum_check");
	ТаблицаЧековКолонки.Добавить("type_payment");
	ТаблицаЧековКолонки.Добавить("attrs");
	ТаблицаЧековКолонки.Добавить("id_discount_card");
	ТаблицаЧековКолонки.Добавить("СтрокиЧека");
	Возврат ТаблицаЧеков;
КонецФункции
    
&НаСервере
Функция ПолучитьЭлементСправочника(Код, Справочник, КодВладельца = Неопределено, СправочникВладелец = Неопределено)
	Код = Формат(Код,"ЧГ=0; ЧН=0");
	Если НЕ КодВладельца = Неопределено Тогда
		КодВладельца = Формат(КодВладельца,"ЧГ=0; ЧН=0");
		СпрВладелец = Справочники[СправочникВладелец];
		
		Если Метаданные.Справочники[СправочникВладелец].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ДлинаКода = Метаданные.Справочники[СправочникВладелец].ДлинаКода;
			// "Гениальное" и непортируемое решение 
			Нули = "00000000000000000000000000";
			//Нули = "";
			КодЭлемента = Прав(Нули + КодВладельца, ДлинаКода);
		Иначе
			КодЭлемента = КодВладельца;
		КонецЕсли;
		
		//Если НЕ СправочникВладелец = "Номенклатура" Тогда
		//	ЗначениеВладелец = СпрВладелец.НайтиПоКоду(КодЭлемента);
		//Иначе
		//	Если Константы.chm_РаботатьСАртикулами.Получить() Тогда
		//		КодЭлемента = КодВладельца;
		//		ЗначениеВладелец = СпрВладелец.НайтиПоРеквизиту("Артикул",КодЭлемента);
		//	Иначе
				ЗначениеВладелец = СпрВладелец.НайтиПоКоду(КодЭлемента);
		//	КонецЕсли;
		//КонецЕсли;
				
	КонецЕсли;
	
	Спр = Справочники[Справочник];
	
	Если Метаданные.Справочники[Справочник].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
		ДлинаКода = Метаданные.Справочники[Справочник].ДлинаКода;
		// "Гениальное" и непортируемое решение 
		Нули = "00000000000000000000000000";
		//Нули = "";
		КодЭлемента = Прав(Нули + Код, ДлинаКода);
	Иначе
		КодЭлемента = Код;
	КонецЕсли;
	
	
	Если НЕ Справочник = "Номенклатура" Тогда
			Если НЕ КодВладельца = Неопределено Тогда
				Значение = Спр.НайтиПоКоду(КодЭлемента,,,ЗначениеВладелец.Ссылка);
			Иначе
				Значение = Спр.НайтиПоКоду(КодЭлемента);
			КонецЕсли;
	Иначе
		//Если Константы.chm_РаботатьСАртикулами.Получить() Тогда
		//	КодЭлемента = Код;
		//	Значение = Спр.НайтиПоРеквизиту("Артикул",КодЭлемента);
		//Иначе
			Значение = Спр.НайтиПоКоду(КодЭлемента);
		//КонецЕсли;
	КонецЕсли;

	Возврат Значение;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии()
	//Объект.НачалоПериода = НачалоМесяца(ТекущаяДата());
	Объект.НачалоПериода = ПолучитьДатуИзСтроки("01.01.2018");
	Объект.КонецПериода = ТекущаяДата();
	Объект.РазделятьПоДням = Истина;
	Объект.ТипЗагрузки = 1;
	Объект.ПортСервера = "5432";
		
	// Склад и касса по-умолчанию
	Объект.ККМ = Справочники.КассыККМ.НайтиПоКоду("000000001");
	Если Объект.ККМ.Пустая() Тогда
		Сообщить("Не найдена касса предприятия!");
	КонецЕсли;
	Объект.Склад = Справочники.Склады.НайтиПоКоду("000000001");
	Если Объект.Склад.Пустая() Тогда
		Сообщить("Не найден склад предприятия!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗагрузкиПриИзменении(Элемент)
	// Чистим таблицу документов
	Объект.ТаблицаДокументов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	// Сохраняем данные из Таблицы Документов
	Если Объект.ТипЗагрузки = 1 Тогда
		СохранитьОтчетРозничныхПродаж();
	ИначеЕсли Объект.ТипЗагрузки = 2 Тогда	
		СохранитьПоступлениеТоваровУслуг();
	ИначеЕсли Объект.ТипЗагрузки = 3 Тогда
		;
	ИначеЕсли Объект.ТипЗагрузки = 4 Тогда
		;
	ИначеЕсли Объект.ТипЗагрузки = 5 Тогда
		;
	ИначеЕсли Объект.ТипЗагрузки = 6 Тогда
		;
	ИначеЕсли Объект.ТипЗагрузки = 7 Тогда
		;
	ИначеЕсли Объект.ТипЗагрузки = 8 Тогда
		;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура КопироватьРеквизитыТаблицыЗначений(ТаблицаЗначенийОткуда, ТаблицаЗначенийКуда, ПутьКуда)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаЗначенийКуда.Колонки Цикл
		Если Колонка.Имя = "Пометка" 
			Или Колонка.Имя = "ПредставлениеДокумента" 
			Или Колонка.Имя = "ПредставлениеСтрокиХамелеона" Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхРеквизитов.Добавить(ПутьКуда + "." + Колонка.Имя);
	КонецЦикла;

	//МассивДобавляемыхПолей = Новый Массив;
    Для Каждого Колонка Из ТаблицаЗначенийОткуда.Колонки Цикл
		Если Колонка.Имя = "Пометка" 
			Или Колонка.Имя = "ПредставлениеДокумента" 
			Или Колонка.Имя = "ПредставлениеСтрокиХамелеона" Тогда
			
			Продолжить;
		КонецЕсли;

        МассивДобавляемыхРеквизитов.Добавить(
			Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ПутьКуда, Колонка.Заголовок));  
		//НоваяКолонка = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаДокументов); 
		//МассивДобавляемыхПолей.Добавить(НоваяКолонка);   
	    КонецЦикла;
    
    ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
КонецПроцедуры


 